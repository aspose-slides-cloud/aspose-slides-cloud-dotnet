// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="SlidesApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing SlidesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SlidesApiTests
    {
        private SlidesApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            TestUtils.Init();
            m_instance = TestUtils.SlidesApi;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test CopyFile
        /// </summary>
        [Test]
        public void CopyFile()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFile", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CopyFileInvallidSrcPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFile", "SrcPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CopyFileInvallidDestPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFile", "DestPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CopyFileInvallidSrcStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFile", "SrcStorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CopyFileInvallidDestStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFile", "DestStorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CopyFileInvallidVersionId()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFile", "VersionId");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test CopyFolder
        /// </summary>
        [Test]
        public void CopyFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFolder", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFolder(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CopyFolderInvallidSrcPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFolder", "SrcPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFolder(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CopyFolderInvallidDestPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFolder", "DestPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFolder(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CopyFolderInvallidSrcStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFolder", "SrcStorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFolder(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CopyFolderInvallidDestStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CopyFolder", "DestStorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CopyFolder(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test CreateFolder
        /// </summary>
        [Test]
        public void CreateFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CreateFolder", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CreateFolder(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CreateFolderInvallidPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CreateFolder", "Path");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CreateFolder(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void CreateFolderInvallidStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("CreateFolder", "StorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.CreateFolder(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test DeleteChartCategory
        /// </summary>
        [Test]
        public void DeleteChartCategory()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartCategory", null);
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartCategoryInvallidName()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartCategory", "Name");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartCategoryInvallidSlideIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartCategory", "SlideIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartCategoryInvallidShapeIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartCategory", "ShapeIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartCategoryInvallidCategoryIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartCategory", "CategoryIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartCategoryInvallidPassword()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartCategory", "Password");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartCategoryInvallidFolder()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartCategory", "Folder");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartCategoryInvallidStorage()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartCategory", "Storage");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteChartDataPoint
        /// </summary>
        [Test]
        public void DeleteChartDataPoint()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartDataPoint", null);
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartDataPointInvallidName()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartDataPoint", "Name");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartDataPointInvallidSlideIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartDataPoint", "SlideIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartDataPointInvallidShapeIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartDataPoint", "ShapeIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartDataPointInvallidSeriesIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartDataPoint", "SeriesIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartDataPointInvallidPointIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartDataPoint", "PointIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartDataPointInvallidPassword()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartDataPoint", "Password");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartDataPointInvallidFolder()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartDataPoint", "Folder");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartDataPointInvallidStorage()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartDataPoint", "Storage");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteChartSeries
        /// </summary>
        [Test]
        public void DeleteChartSeries()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartSeries", null);
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartSeriesInvallidName()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartSeries", "Name");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartSeriesInvallidSlideIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartSeries", "SlideIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartSeriesInvallidShapeIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartSeries", "ShapeIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartSeriesInvallidSeriesIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartSeries", "SeriesIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartSeriesInvallidPassword()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartSeries", "Password");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartSeriesInvallidFolder()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartSeries", "Folder");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteChartSeriesInvallidStorage()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("DeleteChartSeries", "Storage");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteFile
        /// </summary>
        [Test]
        public void DeleteFile()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("DeleteFile", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.DeleteFile(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void DeleteFileInvallidPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("DeleteFile", "Path");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.DeleteFile(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void DeleteFileInvallidStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("DeleteFile", "StorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.DeleteFile(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void DeleteFileInvallidVersionId()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("DeleteFile", "VersionId");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.DeleteFile(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test DeleteFolder
        /// </summary>
        [Test]
        public void DeleteFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("DeleteFolder", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.DeleteFolder(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<bool?>("Recursive"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void DeleteFolderInvallidPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("DeleteFolder", "Path");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.DeleteFolder(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<bool?>("Recursive"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void DeleteFolderInvallidStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("DeleteFolder", "StorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.DeleteFolder(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<bool?>("Recursive"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void DeleteFolderInvallidRecursive()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("DeleteFolder", "Recursive");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.DeleteFolder(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<bool?>("Recursive"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlide
        /// </summary>
        [Test]
        public void DeleteNotesSlide()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("DeleteNotesSlide", null);
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideInvallidName()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("DeleteNotesSlide", "Name");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideInvallidSlideIndex()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("DeleteNotesSlide", "SlideIndex");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideInvallidPassword()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("DeleteNotesSlide", "Password");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideInvallidFolder()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("DeleteNotesSlide", "Folder");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideInvallidStorage()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("DeleteNotesSlide", "Storage");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlideParagraph
        /// </summary>
        [Test]
        public void DeleteNotesSlideParagraph()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraph", null);
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvallidName()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraph", "Name");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraph", "SlideIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraph", "ShapeIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvallidParagraphIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraph", "ParagraphIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvallidPassword()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraph", "Password");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvallidFolder()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraph", "Folder");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvallidStorage()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraph", "Storage");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlideParagraphs
        /// </summary>
        [Test]
        public void DeleteNotesSlideParagraphs()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraphs", null);
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvallidName()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraphs", "Name");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvallidSlideIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraphs", "SlideIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvallidShapeIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraphs", "ShapeIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvallidParagraphs()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraphs", "Paragraphs");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvallidPassword()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraphs", "Password");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvallidFolder()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraphs", "Folder");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvallidStorage()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteNotesSlideParagraphs", "Storage");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlidePortion
        /// </summary>
        [Test]
        public void DeleteNotesSlidePortion()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortion", null);
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvallidName()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortion", "Name");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvallidSlideIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortion", "SlideIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvallidShapeIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortion", "ShapeIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvallidParagraphIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortion", "ParagraphIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvallidPortionIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortion", "PortionIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvallidPassword()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortion", "Password");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvallidFolder()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortion", "Folder");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvallidStorage()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortion", "Storage");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlidePortions
        /// </summary>
        [Test]
        public void DeleteNotesSlidePortions()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortions", null);
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvallidName()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortions", "Name");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvallidSlideIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortions", "SlideIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvallidShapeIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortions", "ShapeIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvallidParagraphIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortions", "ParagraphIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvallidPortions()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortions", "Portions");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvallidPassword()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortions", "Password");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvallidFolder()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortions", "Folder");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvallidStorage()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteNotesSlidePortions", "Storage");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlideShape
        /// </summary>
        [Test]
        public void DeleteNotesSlideShape()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShape", null);
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvallidName()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShape", "Name");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvallidSlideIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShape", "SlideIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvallidShapeIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShape", "ShapeIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvallidPassword()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShape", "Password");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvallidFolder()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShape", "Folder");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvallidStorage()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShape", "Storage");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlideShapes
        /// </summary>
        [Test]
        public void DeleteNotesSlideShapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShapes", null);
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvallidName()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShapes", "Name");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvallidSlideIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShapes", "SlideIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvallidShapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShapes", "Shapes");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvallidPassword()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShapes", "Password");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvallidFolder()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShapes", "Folder");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvallidStorage()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteNotesSlideShapes", "Storage");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteParagraph
        /// </summary>
        [Test]
        public void DeleteParagraph()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraph", null);
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvallidName()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraph", "Name");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraph", "SlideIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraph", "ShapeIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvallidParagraphIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraph", "ParagraphIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvallidPassword()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraph", "Password");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvallidFolder()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraph", "Folder");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvallidStorage()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraph", "Storage");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteParagraphs
        /// </summary>
        [Test]
        public void DeleteParagraphs()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraphs", null);
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvallidName()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraphs", "Name");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvallidSlideIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraphs", "SlideIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvallidShapeIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraphs", "ShapeIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvallidParagraphs()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraphs", "Paragraphs");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvallidPassword()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraphs", "Password");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvallidFolder()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraphs", "Folder");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvallidStorage()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteParagraphs", "Storage");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeletePortion
        /// </summary>
        [Test]
        public void DeletePortion()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortion", null);
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvallidName()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortion", "Name");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvallidSlideIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortion", "SlideIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvallidShapeIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortion", "ShapeIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvallidParagraphIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortion", "ParagraphIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvallidPortionIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortion", "PortionIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvallidPassword()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortion", "Password");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvallidFolder()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortion", "Folder");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvallidStorage()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortion", "Storage");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeletePortions
        /// </summary>
        [Test]
        public void DeletePortions()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortions", null);
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvallidName()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortions", "Name");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvallidSlideIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortions", "SlideIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvallidShapeIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortions", "ShapeIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvallidParagraphIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortions", "ParagraphIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvallidPortions()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortions", "Portions");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvallidPassword()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortions", "Password");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvallidFolder()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortions", "Folder");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvallidStorage()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeletePortions", "Storage");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSection
        /// </summary>
        [Test]
        public void DeleteSection()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSection", null);
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionInvallidName()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSection", "Name");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionInvallidSectionIndex()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSection", "SectionIndex");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionInvallidWithSlides()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSection", "WithSlides");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionInvallidPassword()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSection", "Password");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionInvallidFolder()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSection", "Folder");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionInvallidStorage()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSection", "Storage");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSections
        /// </summary>
        [Test]
        public void DeleteSections()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSections", null);
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Sections"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionsInvallidName()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSections", "Name");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Sections"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionsInvallidSections()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSections", "Sections");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Sections"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionsInvallidWithSlides()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSections", "WithSlides");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Sections"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionsInvallidPassword()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSections", "Password");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Sections"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionsInvallidFolder()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSections", "Folder");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Sections"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSectionsInvallidStorage()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("DeleteSections", "Storage");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Sections"), testExecutor.GetTestValue<bool?>("WithSlides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideAnimation
        /// </summary>
        [Test]
        public void DeleteAnimation()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimation", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimation", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimation", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimation", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimation", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimation", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideAnimationEffect
        /// </summary>
        [Test]
        public void DeleteAnimationEffect()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationEffect", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationEffectInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationEffect", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationEffectInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationEffect", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationEffectInvallidEffectIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationEffect", "EffectIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationEffectInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationEffect", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationEffectInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationEffect", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationEffectInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationEffect", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideAnimationInteractiveSequence
        /// </summary>
        [Test]
        public void DeleteAnimationInteractiveSequence()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequence", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequence", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequence", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceInvallidSequenceIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequence", "SequenceIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequence", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequence", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequence", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideAnimationInteractiveSequenceEffect
        /// </summary>
        [Test]
        public void DeleteAnimationInteractiveSequenceEffect()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequenceEffect", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceEffectInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequenceEffect", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceEffectInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequenceEffect", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceEffectInvallidSequenceIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequenceEffect", "SequenceIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceEffectInvallidEffectIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequenceEffect", "EffectIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceEffectInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequenceEffect", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceEffectInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequenceEffect", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequenceEffectInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequenceEffect", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideAnimationInteractiveSequences
        /// </summary>
        [Test]
        public void DeleteAnimationInteractiveSequences()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequences", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequences(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequencesInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequences", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequences(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequencesInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequences", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequences(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequencesInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequences", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequences(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequencesInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequences", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequences(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationInteractiveSequencesInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationInteractiveSequences", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationInteractiveSequences(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideAnimationMainSequence
        /// </summary>
        [Test]
        public void DeleteAnimationMainSequence()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationMainSequence", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationMainSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationMainSequenceInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationMainSequence", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationMainSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationMainSequenceInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationMainSequence", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationMainSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationMainSequenceInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationMainSequence", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationMainSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationMainSequenceInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationMainSequence", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationMainSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteAnimationMainSequenceInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("DeleteSlideAnimationMainSequence", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteAnimationMainSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideByIndex
        /// </summary>
        [Test]
        public void DeleteSlide()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlideByIndex", null);
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideInvallidName()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlideByIndex", "Name");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideInvallidSlideIndex()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlideByIndex", "SlideIndex");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideInvallidPassword()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlideByIndex", "Password");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideInvallidFolder()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlideByIndex", "Folder");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideInvallidStorage()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlideByIndex", "Storage");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideShape
        /// </summary>
        [Test]
        public void DeleteShape()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShape", null);
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapeInvallidName()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShape", "Name");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapeInvallidSlideIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShape", "SlideIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapeInvallidShapeIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShape", "ShapeIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapeInvallidPassword()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShape", "Password");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapeInvallidFolder()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShape", "Folder");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapeInvallidStorage()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShape", "Storage");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideShapes
        /// </summary>
        [Test]
        public void DeleteShapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShapes", null);
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapesInvallidName()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShapes", "Name");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapesInvallidSlideIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShapes", "SlideIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapesInvallidShapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShapes", "Shapes");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapesInvallidPassword()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShapes", "Password");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapesInvallidFolder()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShapes", "Folder");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteShapesInvallidStorage()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideShapes", "Storage");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideSubshape
        /// </summary>
        [Test]
        public void DeleteSubshape()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshape", null);
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeInvallidName()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshape", "Name");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeInvallidSlideIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshape", "SlideIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeInvallidShapeIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshape", "ShapeIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeInvallidPath()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshape", "Path");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeInvallidPassword()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshape", "Password");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeInvallidFolder()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshape", "Folder");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeInvallidStorage()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshape", "Storage");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideSubshapes
        /// </summary>
        [Test]
        public void DeleteSubshapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshapes", null);
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapesInvallidName()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshapes", "Name");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapesInvallidSlideIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshapes", "SlideIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapesInvallidPath()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshapes", "Path");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapesInvallidShapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshapes", "Shapes");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapesInvallidPassword()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshapes", "Password");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapesInvallidFolder()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshapes", "Folder");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapesInvallidStorage()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("DeleteSlideSubshapes", "Storage");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlidesCleanSlidesList
        /// </summary>
        [Test]
        public void DeleteSlides()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlidesCleanSlidesList", null);
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Slides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesInvallidName()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlidesCleanSlidesList", "Name");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Slides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesInvallidSlides()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlidesCleanSlidesList", "Slides");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Slides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesInvallidPassword()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlidesCleanSlidesList", "Password");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Slides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesInvallidFolder()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlidesCleanSlidesList", "Folder");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Slides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesInvallidStorage()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("DeleteSlidesCleanSlidesList", "Storage");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("Slides"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlidesDocumentProperties
        /// </summary>
        [Test]
        public void DeleteDocumentProperties()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperties", null);
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteDocumentPropertiesInvallidName()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperties", "Name");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteDocumentPropertiesInvallidPassword()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperties", "Password");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteDocumentPropertiesInvallidFolder()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperties", "Folder");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteDocumentPropertiesInvallidStorage()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperties", "Storage");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlidesDocumentProperty
        /// </summary>
        [Test]
        public void DeleteDocumentProperty()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperty", null);
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteDocumentPropertyInvallidName()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperty", "Name");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteDocumentPropertyInvallidPropertyName()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperty", "PropertyName");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteDocumentPropertyInvallidPassword()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperty", "Password");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteDocumentPropertyInvallidFolder()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperty", "Folder");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteDocumentPropertyInvallidStorage()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("DeleteSlidesDocumentProperty", "Storage");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlidesSlideBackground
        /// </summary>
        [Test]
        public void DeleteBackground()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("DeleteSlidesSlideBackground", null);
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteBackgroundInvallidName()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("DeleteSlidesSlideBackground", "Name");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteBackgroundInvallidSlideIndex()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("DeleteSlidesSlideBackground", "SlideIndex");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteBackgroundInvallidPassword()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("DeleteSlidesSlideBackground", "Password");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteBackgroundInvallidFolder()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("DeleteSlidesSlideBackground", "Folder");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteBackgroundInvallidStorage()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("DeleteSlidesSlideBackground", "Storage");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSubshapeParagraph
        /// </summary>
        [Test]
        public void DeleteSubshapeParagraph()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraph", null);
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphInvallidName()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraph", "Name");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraph", "SlideIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraph", "ShapeIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphInvallidParagraphIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraph", "ParagraphIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphInvallidPath()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraph", "Path");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphInvallidPassword()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraph", "Password");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphInvallidFolder()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraph", "Folder");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphInvallidStorage()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraph", "Storage");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSubshapeParagraphs
        /// </summary>
        [Test]
        public void DeleteSubshapeParagraphs()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraphs", null);
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphsInvallidName()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraphs", "Name");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphsInvallidSlideIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraphs", "SlideIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphsInvallidShapeIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraphs", "ShapeIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphsInvallidPath()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraphs", "Path");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphsInvallidParagraphs()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraphs", "Paragraphs");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphsInvallidPassword()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraphs", "Password");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphsInvallidFolder()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraphs", "Folder");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapeParagraphsInvallidStorage()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("DeleteSubshapeParagraphs", "Storage");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Paragraphs"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSubshapePortion
        /// </summary>
        [Test]
        public void DeleteSubshapePortion()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortion", null);
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionInvallidName()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortion", "Name");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionInvallidSlideIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortion", "SlideIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionInvallidShapeIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortion", "ShapeIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionInvallidParagraphIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortion", "ParagraphIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionInvallidPortionIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortion", "PortionIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionInvallidPath()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortion", "Path");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionInvallidPassword()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortion", "Password");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionInvallidFolder()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortion", "Folder");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionInvallidStorage()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortion", "Storage");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSubshapePortions
        /// </summary>
        [Test]
        public void DeleteSubshapePortions()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortions", null);
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionsInvallidName()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortions", "Name");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionsInvallidSlideIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortions", "SlideIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionsInvallidShapeIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortions", "ShapeIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionsInvallidParagraphIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortions", "ParagraphIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionsInvallidPath()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortions", "Path");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionsInvallidPortions()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortions", "Portions");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionsInvallidPassword()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortions", "Password");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionsInvallidFolder()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortions", "Folder");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSubshapePortionsInvallidStorage()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("DeleteSubshapePortions", "Storage");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<List<int>>("Portions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DownloadFile
        /// </summary>
        [Test]
        public void DownloadFile()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("DownloadFile", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadFile(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadFileInvallidPath()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("DownloadFile", "Path");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadFile(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadFileInvallidStorageName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("DownloadFile", "StorageName");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadFile(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadFileInvallidVersionId()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("DownloadFile", "VersionId");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadFile(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetDiscUsage
        /// </summary>
        [Test]
        public void GetDiscUsage()
        {
            TestExecutor<DiscUsage> testExecutor = new TestExecutor<DiscUsage>("GetDiscUsage", null);
            DiscUsage response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDiscUsage(testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetDiscUsageInvallidStorageName()
        {
            TestExecutor<DiscUsage> testExecutor = new TestExecutor<DiscUsage>("GetDiscUsage", "StorageName");
            DiscUsage response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDiscUsage(testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetFileVersions
        /// </summary>
        [Test]
        public void GetFileVersions()
        {
            TestExecutor<FileVersions> testExecutor = new TestExecutor<FileVersions>("GetFileVersions", null);
            FileVersions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFileVersions(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFileVersionsInvallidPath()
        {
            TestExecutor<FileVersions> testExecutor = new TestExecutor<FileVersions>("GetFileVersions", "Path");
            FileVersions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFileVersions(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFileVersionsInvallidStorageName()
        {
            TestExecutor<FileVersions> testExecutor = new TestExecutor<FileVersions>("GetFileVersions", "StorageName");
            FileVersions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFileVersions(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetFilesList
        /// </summary>
        [Test]
        public void GetFilesList()
        {
            TestExecutor<FilesList> testExecutor = new TestExecutor<FilesList>("GetFilesList", null);
            FilesList response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFilesList(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFilesListInvallidPath()
        {
            TestExecutor<FilesList> testExecutor = new TestExecutor<FilesList>("GetFilesList", "Path");
            FilesList response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFilesList(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFilesListInvallidStorageName()
        {
            TestExecutor<FilesList> testExecutor = new TestExecutor<FilesList>("GetFilesList", "StorageName");
            FilesList response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFilesList(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetLayoutSlide
        /// </summary>
        [Test]
        public void GetLayoutSlide()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("GetLayoutSlide", null);
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlideInvallidName()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("GetLayoutSlide", "Name");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlideInvallidSlideIndex()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("GetLayoutSlide", "SlideIndex");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlideInvallidPassword()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("GetLayoutSlide", "Password");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlideInvallidFolder()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("GetLayoutSlide", "Folder");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlideInvallidStorage()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("GetLayoutSlide", "Storage");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetLayoutSlidesList
        /// </summary>
        [Test]
        public void GetLayoutSlides()
        {
            TestExecutor<LayoutSlides> testExecutor = new TestExecutor<LayoutSlides>("GetLayoutSlidesList", null);
            LayoutSlides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlidesInvallidName()
        {
            TestExecutor<LayoutSlides> testExecutor = new TestExecutor<LayoutSlides>("GetLayoutSlidesList", "Name");
            LayoutSlides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlidesInvallidPassword()
        {
            TestExecutor<LayoutSlides> testExecutor = new TestExecutor<LayoutSlides>("GetLayoutSlidesList", "Password");
            LayoutSlides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlidesInvallidFolder()
        {
            TestExecutor<LayoutSlides> testExecutor = new TestExecutor<LayoutSlides>("GetLayoutSlidesList", "Folder");
            LayoutSlides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlidesInvallidStorage()
        {
            TestExecutor<LayoutSlides> testExecutor = new TestExecutor<LayoutSlides>("GetLayoutSlidesList", "Storage");
            LayoutSlides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetMasterSlide
        /// </summary>
        [Test]
        public void GetMasterSlide()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("GetMasterSlide", null);
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlideInvallidName()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("GetMasterSlide", "Name");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlideInvallidSlideIndex()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("GetMasterSlide", "SlideIndex");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlideInvallidPassword()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("GetMasterSlide", "Password");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlideInvallidFolder()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("GetMasterSlide", "Folder");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlideInvallidStorage()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("GetMasterSlide", "Storage");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetMasterSlidesList
        /// </summary>
        [Test]
        public void GetMasterSlides()
        {
            TestExecutor<MasterSlides> testExecutor = new TestExecutor<MasterSlides>("GetMasterSlidesList", null);
            MasterSlides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlidesInvallidName()
        {
            TestExecutor<MasterSlides> testExecutor = new TestExecutor<MasterSlides>("GetMasterSlidesList", "Name");
            MasterSlides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlidesInvallidPassword()
        {
            TestExecutor<MasterSlides> testExecutor = new TestExecutor<MasterSlides>("GetMasterSlidesList", "Password");
            MasterSlides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlidesInvallidFolder()
        {
            TestExecutor<MasterSlides> testExecutor = new TestExecutor<MasterSlides>("GetMasterSlidesList", "Folder");
            MasterSlides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlidesInvallidStorage()
        {
            TestExecutor<MasterSlides> testExecutor = new TestExecutor<MasterSlides>("GetMasterSlidesList", "Storage");
            MasterSlides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlide
        /// </summary>
        [Test]
        public void GetNotesSlide()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("GetNotesSlide", null);
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideInvallidName()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("GetNotesSlide", "Name");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideInvallidSlideIndex()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("GetNotesSlide", "SlideIndex");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideInvallidPassword()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("GetNotesSlide", "Password");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideInvallidFolder()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("GetNotesSlide", "Folder");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideInvallidStorage()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("GetNotesSlide", "Storage");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideExists
        /// </summary>
        [Test]
        public void NotesSlideExists()
        {
            TestExecutor<EntityExists> testExecutor = new TestExecutor<EntityExists>("GetNotesSlideExists", null);
            EntityExists response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.NotesSlideExists(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void NotesSlideExistsInvallidName()
        {
            TestExecutor<EntityExists> testExecutor = new TestExecutor<EntityExists>("GetNotesSlideExists", "Name");
            EntityExists response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.NotesSlideExists(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void NotesSlideExistsInvallidSlideIndex()
        {
            TestExecutor<EntityExists> testExecutor = new TestExecutor<EntityExists>("GetNotesSlideExists", "SlideIndex");
            EntityExists response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.NotesSlideExists(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void NotesSlideExistsInvallidPassword()
        {
            TestExecutor<EntityExists> testExecutor = new TestExecutor<EntityExists>("GetNotesSlideExists", "Password");
            EntityExists response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.NotesSlideExists(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void NotesSlideExistsInvallidFolder()
        {
            TestExecutor<EntityExists> testExecutor = new TestExecutor<EntityExists>("GetNotesSlideExists", "Folder");
            EntityExists response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.NotesSlideExists(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void NotesSlideExistsInvallidStorage()
        {
            TestExecutor<EntityExists> testExecutor = new TestExecutor<EntityExists>("GetNotesSlideExists", "Storage");
            EntityExists response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.NotesSlideExists(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideHeaderFooter
        /// </summary>
        [Test]
        public void GetNotesSlideHeaderFooter()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("GetNotesSlideHeaderFooter", null);
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideHeaderFooterInvallidName()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("GetNotesSlideHeaderFooter", "Name");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideHeaderFooterInvallidSlideIndex()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("GetNotesSlideHeaderFooter", "SlideIndex");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideHeaderFooterInvallidPassword()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("GetNotesSlideHeaderFooter", "Password");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideHeaderFooterInvallidFolder()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("GetNotesSlideHeaderFooter", "Folder");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideHeaderFooterInvallidStorage()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("GetNotesSlideHeaderFooter", "Storage");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShape
        /// </summary>
        [Test]
        public void GetNotesSlideShape()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetNotesSlideShape", null);
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvallidName()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetNotesSlideShape", "Name");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvallidSlideIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetNotesSlideShape", "SlideIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvallidShapeIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetNotesSlideShape", "ShapeIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvallidPassword()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetNotesSlideShape", "Password");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvallidFolder()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetNotesSlideShape", "Folder");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvallidStorage()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetNotesSlideShape", "Storage");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapeParagraph
        /// </summary>
        [Test]
        public void GetNotesSlideParagraph()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetNotesSlideShapeParagraph", null);
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphInvallidName()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetNotesSlideShapeParagraph", "Name");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetNotesSlideShapeParagraph", "SlideIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetNotesSlideShapeParagraph", "ShapeIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphInvallidParagraphIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetNotesSlideShapeParagraph", "ParagraphIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphInvallidPassword()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetNotesSlideShapeParagraph", "Password");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphInvallidFolder()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetNotesSlideShapeParagraph", "Folder");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphInvallidStorage()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetNotesSlideShapeParagraph", "Storage");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapeParagraphs
        /// </summary>
        [Test]
        public void GetNotesSlideParagraphs()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetNotesSlideShapeParagraphs", null);
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphsInvallidName()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetNotesSlideShapeParagraphs", "Name");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphsInvallidSlideIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetNotesSlideShapeParagraphs", "SlideIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphsInvallidShapeIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetNotesSlideShapeParagraphs", "ShapeIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphsInvallidPassword()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetNotesSlideShapeParagraphs", "Password");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphsInvallidFolder()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetNotesSlideShapeParagraphs", "Folder");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideParagraphsInvallidStorage()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetNotesSlideShapeParagraphs", "Storage");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapePortion
        /// </summary>
        [Test]
        public void GetNotesSlidePortion()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetNotesSlideShapePortion", null);
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionInvallidName()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetNotesSlideShapePortion", "Name");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionInvallidSlideIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetNotesSlideShapePortion", "SlideIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionInvallidShapeIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetNotesSlideShapePortion", "ShapeIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionInvallidParagraphIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetNotesSlideShapePortion", "ParagraphIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionInvallidPortionIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetNotesSlideShapePortion", "PortionIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionInvallidPassword()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetNotesSlideShapePortion", "Password");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionInvallidFolder()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetNotesSlideShapePortion", "Folder");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionInvallidStorage()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetNotesSlideShapePortion", "Storage");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapePortions
        /// </summary>
        [Test]
        public void GetNotesSlidePortions()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetNotesSlideShapePortions", null);
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionsInvallidName()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetNotesSlideShapePortions", "Name");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionsInvallidSlideIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetNotesSlideShapePortions", "SlideIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionsInvallidShapeIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetNotesSlideShapePortions", "ShapeIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionsInvallidParagraphIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetNotesSlideShapePortions", "ParagraphIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionsInvallidPassword()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetNotesSlideShapePortions", "Password");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionsInvallidFolder()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetNotesSlideShapePortions", "Folder");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlidePortionsInvallidStorage()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetNotesSlideShapePortions", "Storage");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlidePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapes
        /// </summary>
        [Test]
        public void GetNotesSlideShapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetNotesSlideShapes", null);
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvallidName()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetNotesSlideShapes", "Name");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvallidSlideIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetNotesSlideShapes", "SlideIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvallidPassword()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetNotesSlideShapes", "Password");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvallidFolder()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetNotesSlideShapes", "Folder");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvallidStorage()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetNotesSlideShapes", "Storage");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideWithFormat
        /// </summary>
        [Test]
        public void DownloadNotesSlide()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetNotesSlideWithFormat", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideInvallidName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetNotesSlideWithFormat", "Name");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideInvallidSlideIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetNotesSlideWithFormat", "SlideIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetNotesSlideWithFormat", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideInvallidWidth()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetNotesSlideWithFormat", "Width");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideInvallidHeight()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetNotesSlideWithFormat", "Height");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetNotesSlideWithFormat", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideInvallidFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetNotesSlideWithFormat", "Folder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetNotesSlideWithFormat", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetNotesSlideWithFormat", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetParagraphPortion
        /// </summary>
        [Test]
        public void GetPortion()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetParagraphPortion", null);
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvallidName()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetParagraphPortion", "Name");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvallidSlideIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetParagraphPortion", "SlideIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvallidShapeIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetParagraphPortion", "ShapeIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvallidParagraphIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetParagraphPortion", "ParagraphIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvallidPortionIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetParagraphPortion", "PortionIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvallidPassword()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetParagraphPortion", "Password");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvallidFolder()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetParagraphPortion", "Folder");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvallidStorage()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetParagraphPortion", "Storage");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetParagraphPortions
        /// </summary>
        [Test]
        public void GetPortions()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetParagraphPortions", null);
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvallidName()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetParagraphPortions", "Name");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvallidSlideIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetParagraphPortions", "SlideIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvallidShapeIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetParagraphPortions", "ShapeIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvallidParagraphIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetParagraphPortions", "ParagraphIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvallidPassword()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetParagraphPortions", "Password");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvallidFolder()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetParagraphPortions", "Folder");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvallidStorage()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetParagraphPortions", "Storage");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSections
        /// </summary>
        [Test]
        public void GetSections()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("GetSections", null);
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSectionsInvallidName()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("GetSections", "Name");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSectionsInvallidPassword()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("GetSections", "Password");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSectionsInvallidFolder()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("GetSections", "Folder");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSectionsInvallidStorage()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("GetSections", "Storage");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideAnimation
        /// </summary>
        [Test]
        public void GetAnimation()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("GetSlideAnimation", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int?>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetAnimationInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("GetSlideAnimation", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int?>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetAnimationInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("GetSlideAnimation", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int?>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetAnimationInvallidShapeIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("GetSlideAnimation", "ShapeIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int?>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetAnimationInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("GetSlideAnimation", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int?>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetAnimationInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("GetSlideAnimation", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int?>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetAnimationInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("GetSlideAnimation", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int?>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideHeaderFooter
        /// </summary>
        [Test]
        public void GetSlideHeaderFooter()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("GetSlideHeaderFooter", null);
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideHeaderFooterInvallidName()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("GetSlideHeaderFooter", "Name");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideHeaderFooterInvallidSlideIndex()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("GetSlideHeaderFooter", "SlideIndex");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideHeaderFooterInvallidPassword()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("GetSlideHeaderFooter", "Password");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideHeaderFooterInvallidFolder()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("GetSlideHeaderFooter", "Folder");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideHeaderFooterInvallidStorage()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("GetSlideHeaderFooter", "Storage");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideShape
        /// </summary>
        [Test]
        public void GetShape()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideShape", null);
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvallidName()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideShape", "Name");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvallidSlideIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideShape", "SlideIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvallidShapeIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideShape", "ShapeIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvallidPassword()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideShape", "Password");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvallidFolder()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideShape", "Folder");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvallidStorage()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideShape", "Storage");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideShapeParagraph
        /// </summary>
        [Test]
        public void GetParagraph()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideShapeParagraph", null);
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvallidName()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideShapeParagraph", "Name");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideShapeParagraph", "SlideIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideShapeParagraph", "ShapeIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvallidParagraphIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideShapeParagraph", "ParagraphIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvallidPassword()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideShapeParagraph", "Password");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvallidFolder()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideShapeParagraph", "Folder");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvallidStorage()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideShapeParagraph", "Storage");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideShapeParagraphs
        /// </summary>
        [Test]
        public void GetParagraphs()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideShapeParagraphs", null);
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvallidName()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideShapeParagraphs", "Name");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvallidSlideIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideShapeParagraphs", "SlideIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvallidShapeIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideShapeParagraphs", "ShapeIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvallidPassword()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideShapeParagraphs", "Password");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvallidFolder()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideShapeParagraphs", "Folder");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvallidStorage()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideShapeParagraphs", "Storage");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideShapes
        /// </summary>
        [Test]
        public void GetShapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideShapes", null);
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapesInvallidName()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideShapes", "Name");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapesInvallidSlideIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideShapes", "SlideIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapesInvallidPassword()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideShapes", "Password");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapesInvallidFolder()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideShapes", "Folder");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapesInvallidStorage()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideShapes", "Storage");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideSubshape
        /// </summary>
        [Test]
        public void GetSubshape()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideSubshape", null);
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeInvallidName()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideSubshape", "Name");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeInvallidSlideIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideSubshape", "SlideIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeInvallidShapeIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideSubshape", "ShapeIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeInvallidPath()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideSubshape", "Path");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeInvallidPassword()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideSubshape", "Password");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeInvallidFolder()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideSubshape", "Folder");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeInvallidStorage()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("GetSlideSubshape", "Storage");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideSubshapeParagraph
        /// </summary>
        [Test]
        public void GetSubshapeParagraph()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideSubshapeParagraph", null);
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphInvallidName()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideSubshapeParagraph", "Name");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideSubshapeParagraph", "SlideIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideSubshapeParagraph", "ShapeIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphInvallidParagraphIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideSubshapeParagraph", "ParagraphIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphInvallidPath()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideSubshapeParagraph", "Path");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphInvallidPassword()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideSubshapeParagraph", "Password");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphInvallidFolder()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideSubshapeParagraph", "Folder");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphInvallidStorage()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("GetSlideSubshapeParagraph", "Storage");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideSubshapeParagraphs
        /// </summary>
        [Test]
        public void GetSubshapeParagraphs()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideSubshapeParagraphs", null);
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphsInvallidName()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideSubshapeParagraphs", "Name");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphsInvallidSlideIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideSubshapeParagraphs", "SlideIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphsInvallidShapeIndex()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideSubshapeParagraphs", "ShapeIndex");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphsInvallidPath()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideSubshapeParagraphs", "Path");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphsInvallidPassword()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideSubshapeParagraphs", "Password");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphsInvallidFolder()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideSubshapeParagraphs", "Folder");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapeParagraphsInvallidStorage()
        {
            TestExecutor<Paragraphs> testExecutor = new TestExecutor<Paragraphs>("GetSlideSubshapeParagraphs", "Storage");
            Paragraphs response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapeParagraphs(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideSubshapes
        /// </summary>
        [Test]
        public void GetSubshapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideSubshapes", null);
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapesInvallidName()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideSubshapes", "Name");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapesInvallidSlideIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideSubshapes", "SlideIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapesInvallidPath()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideSubshapes", "Path");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapesInvallidPassword()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideSubshapes", "Password");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapesInvallidFolder()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideSubshapes", "Folder");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapesInvallidStorage()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("GetSlideSubshapes", "Storage");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesApiInfo
        /// </summary>
        [Test]
        public void GetApiInfo()
        {
            TestExecutor<ApiInfo> testExecutor = new TestExecutor<ApiInfo>("GetSlidesApiInfo", null);
            ApiInfo response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetApiInfo();
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesDocument
        /// </summary>
        [Test]
        public void GetPresentation()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("GetSlidesDocument", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("GetSlidesDocument", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("GetSlidesDocument", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("GetSlidesDocument", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("GetSlidesDocument", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesDocumentProperties
        /// </summary>
        [Test]
        public void GetDocumentProperties()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("GetSlidesDocumentProperties", null);
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetDocumentPropertiesInvallidName()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("GetSlidesDocumentProperties", "Name");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetDocumentPropertiesInvallidPassword()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("GetSlidesDocumentProperties", "Password");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetDocumentPropertiesInvallidFolder()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("GetSlidesDocumentProperties", "Folder");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetDocumentPropertiesInvallidStorage()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("GetSlidesDocumentProperties", "Storage");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesDocumentProperty
        /// </summary>
        [Test]
        public void GetDocumentProperty()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("GetSlidesDocumentProperty", null);
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetDocumentPropertyInvallidName()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("GetSlidesDocumentProperty", "Name");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetDocumentPropertyInvallidPropertyName()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("GetSlidesDocumentProperty", "PropertyName");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetDocumentPropertyInvallidPassword()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("GetSlidesDocumentProperty", "Password");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetDocumentPropertyInvallidFolder()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("GetSlidesDocumentProperty", "Folder");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetDocumentPropertyInvallidStorage()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("GetSlidesDocumentProperty", "Storage");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesImageWithDefaultFormat
        /// </summary>
        [Test]
        public void DownloadImageDefaultFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithDefaultFormat", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageDefaultFormatInvallidName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithDefaultFormat", "Name");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageDefaultFormatInvallidIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithDefaultFormat", "Index");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageDefaultFormatInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithDefaultFormat", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageDefaultFormatInvallidFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithDefaultFormat", "Folder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageDefaultFormatInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithDefaultFormat", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesImageWithFormat
        /// </summary>
        [Test]
        public void DownloadImage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithFormat", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImage(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageInvallidName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithFormat", "Name");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImage(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageInvallidIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithFormat", "Index");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImage(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithFormat", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImage(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithFormat", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImage(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageInvallidFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithFormat", "Folder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImage(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("GetSlidesImageWithFormat", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImage(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesImages
        /// </summary>
        [Test]
        public void GetPresentationImages()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesImages", null);
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationImagesInvallidName()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesImages", "Name");
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationImagesInvallidPassword()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesImages", "Password");
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationImagesInvallidFolder()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesImages", "Folder");
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationImagesInvallidStorage()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesImages", "Storage");
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesPlaceholder
        /// </summary>
        [Test]
        public void GetPlaceholder()
        {
            TestExecutor<Placeholder> testExecutor = new TestExecutor<Placeholder>("GetSlidesPlaceholder", null);
            Placeholder response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholder(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("PlaceholderIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholderInvallidName()
        {
            TestExecutor<Placeholder> testExecutor = new TestExecutor<Placeholder>("GetSlidesPlaceholder", "Name");
            Placeholder response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholder(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("PlaceholderIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholderInvallidSlideIndex()
        {
            TestExecutor<Placeholder> testExecutor = new TestExecutor<Placeholder>("GetSlidesPlaceholder", "SlideIndex");
            Placeholder response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholder(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("PlaceholderIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholderInvallidPlaceholderIndex()
        {
            TestExecutor<Placeholder> testExecutor = new TestExecutor<Placeholder>("GetSlidesPlaceholder", "PlaceholderIndex");
            Placeholder response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholder(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("PlaceholderIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholderInvallidPassword()
        {
            TestExecutor<Placeholder> testExecutor = new TestExecutor<Placeholder>("GetSlidesPlaceholder", "Password");
            Placeholder response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholder(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("PlaceholderIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholderInvallidFolder()
        {
            TestExecutor<Placeholder> testExecutor = new TestExecutor<Placeholder>("GetSlidesPlaceholder", "Folder");
            Placeholder response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholder(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("PlaceholderIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholderInvallidStorage()
        {
            TestExecutor<Placeholder> testExecutor = new TestExecutor<Placeholder>("GetSlidesPlaceholder", "Storage");
            Placeholder response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholder(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("PlaceholderIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesPlaceholders
        /// </summary>
        [Test]
        public void GetPlaceholders()
        {
            TestExecutor<Placeholders> testExecutor = new TestExecutor<Placeholders>("GetSlidesPlaceholders", null);
            Placeholders response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholders(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholdersInvallidName()
        {
            TestExecutor<Placeholders> testExecutor = new TestExecutor<Placeholders>("GetSlidesPlaceholders", "Name");
            Placeholders response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholders(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholdersInvallidSlideIndex()
        {
            TestExecutor<Placeholders> testExecutor = new TestExecutor<Placeholders>("GetSlidesPlaceholders", "SlideIndex");
            Placeholders response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholders(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholdersInvallidPassword()
        {
            TestExecutor<Placeholders> testExecutor = new TestExecutor<Placeholders>("GetSlidesPlaceholders", "Password");
            Placeholders response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholders(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholdersInvallidFolder()
        {
            TestExecutor<Placeholders> testExecutor = new TestExecutor<Placeholders>("GetSlidesPlaceholders", "Folder");
            Placeholders response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholders(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPlaceholdersInvallidStorage()
        {
            TestExecutor<Placeholders> testExecutor = new TestExecutor<Placeholders>("GetSlidesPlaceholders", "Storage");
            Placeholders response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPlaceholders(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesPresentationTextItems
        /// </summary>
        [Test]
        public void GetPresentationTextItems()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesPresentationTextItems", null);
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationTextItemsInvallidName()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesPresentationTextItems", "Name");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationTextItemsInvallidWithEmpty()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesPresentationTextItems", "WithEmpty");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationTextItemsInvallidPassword()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesPresentationTextItems", "Password");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationTextItemsInvallidFolder()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesPresentationTextItems", "Folder");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPresentationTextItemsInvallidStorage()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesPresentationTextItems", "Storage");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPresentationTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesProtectionProperties
        /// </summary>
        [Test]
        public void GetProtectionProperties()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("GetSlidesProtectionProperties", null);
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetProtectionPropertiesInvallidName()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("GetSlidesProtectionProperties", "Name");
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetProtectionPropertiesInvallidPassword()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("GetSlidesProtectionProperties", "Password");
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetProtectionPropertiesInvallidFolder()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("GetSlidesProtectionProperties", "Folder");
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetProtectionPropertiesInvallidStorage()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("GetSlidesProtectionProperties", "Storage");
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlide
        /// </summary>
        [Test]
        public void GetSlide()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("GetSlidesSlide", null);
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideInvallidName()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("GetSlidesSlide", "Name");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideInvallidSlideIndex()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("GetSlidesSlide", "SlideIndex");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideInvallidPassword()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("GetSlidesSlide", "Password");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideInvallidFolder()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("GetSlidesSlide", "Folder");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideInvallidStorage()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("GetSlidesSlide", "Storage");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideBackground
        /// </summary>
        [Test]
        public void GetBackground()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("GetSlidesSlideBackground", null);
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetBackgroundInvallidName()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("GetSlidesSlideBackground", "Name");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetBackgroundInvallidSlideIndex()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("GetSlidesSlideBackground", "SlideIndex");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetBackgroundInvallidPassword()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("GetSlidesSlideBackground", "Password");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetBackgroundInvallidFolder()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("GetSlidesSlideBackground", "Folder");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetBackgroundInvallidStorage()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("GetSlidesSlideBackground", "Storage");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideComments
        /// </summary>
        [Test]
        public void GetComments()
        {
            TestExecutor<SlideComments> testExecutor = new TestExecutor<SlideComments>("GetSlidesSlideComments", null);
            SlideComments response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetComments(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetCommentsInvallidName()
        {
            TestExecutor<SlideComments> testExecutor = new TestExecutor<SlideComments>("GetSlidesSlideComments", "Name");
            SlideComments response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetComments(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetCommentsInvallidSlideIndex()
        {
            TestExecutor<SlideComments> testExecutor = new TestExecutor<SlideComments>("GetSlidesSlideComments", "SlideIndex");
            SlideComments response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetComments(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetCommentsInvallidPassword()
        {
            TestExecutor<SlideComments> testExecutor = new TestExecutor<SlideComments>("GetSlidesSlideComments", "Password");
            SlideComments response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetComments(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetCommentsInvallidFolder()
        {
            TestExecutor<SlideComments> testExecutor = new TestExecutor<SlideComments>("GetSlidesSlideComments", "Folder");
            SlideComments response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetComments(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetCommentsInvallidStorage()
        {
            TestExecutor<SlideComments> testExecutor = new TestExecutor<SlideComments>("GetSlidesSlideComments", "Storage");
            SlideComments response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetComments(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideImages
        /// </summary>
        [Test]
        public void GetSlideImages()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesSlideImages", null);
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideImagesInvallidName()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesSlideImages", "Name");
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideImagesInvallidSlideIndex()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesSlideImages", "SlideIndex");
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideImagesInvallidPassword()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesSlideImages", "Password");
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideImagesInvallidFolder()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesSlideImages", "Folder");
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideImagesInvallidStorage()
        {
            TestExecutor<Images> testExecutor = new TestExecutor<Images>("GetSlidesSlideImages", "Storage");
            Images response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideProperties
        /// </summary>
        [Test]
        public void GetSlideProperties()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("GetSlidesSlideProperties", null);
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidePropertiesInvallidName()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("GetSlidesSlideProperties", "Name");
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidePropertiesInvallidPassword()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("GetSlidesSlideProperties", "Password");
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidePropertiesInvallidFolder()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("GetSlidesSlideProperties", "Folder");
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidePropertiesInvallidStorage()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("GetSlidesSlideProperties", "Storage");
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideTextItems
        /// </summary>
        [Test]
        public void GetSlideTextItems()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesSlideTextItems", null);
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideTextItemsInvallidName()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesSlideTextItems", "Name");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideTextItemsInvallidSlideIndex()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesSlideTextItems", "SlideIndex");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideTextItemsInvallidWithEmpty()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesSlideTextItems", "WithEmpty");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideTextItemsInvallidPassword()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesSlideTextItems", "Password");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideTextItemsInvallidFolder()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesSlideTextItems", "Folder");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideTextItemsInvallidStorage()
        {
            TestExecutor<TextItems> testExecutor = new TestExecutor<TextItems>("GetSlidesSlideTextItems", "Storage");
            TextItems response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideTextItems(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<bool?>("WithEmpty"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlidesList
        /// </summary>
        [Test]
        public void GetSlides()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("GetSlidesSlidesList", null);
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesInvallidName()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("GetSlidesSlidesList", "Name");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesInvallidPassword()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("GetSlidesSlidesList", "Password");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesInvallidFolder()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("GetSlidesSlidesList", "Folder");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesInvallidStorage()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("GetSlidesSlidesList", "Storage");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesTheme
        /// </summary>
        [Test]
        public void GetTheme()
        {
            TestExecutor<Theme> testExecutor = new TestExecutor<Theme>("GetSlidesTheme", null);
            Theme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetTheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetThemeInvallidName()
        {
            TestExecutor<Theme> testExecutor = new TestExecutor<Theme>("GetSlidesTheme", "Name");
            Theme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetTheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetThemeInvallidSlideIndex()
        {
            TestExecutor<Theme> testExecutor = new TestExecutor<Theme>("GetSlidesTheme", "SlideIndex");
            Theme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetTheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetThemeInvallidPassword()
        {
            TestExecutor<Theme> testExecutor = new TestExecutor<Theme>("GetSlidesTheme", "Password");
            Theme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetTheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetThemeInvallidFolder()
        {
            TestExecutor<Theme> testExecutor = new TestExecutor<Theme>("GetSlidesTheme", "Folder");
            Theme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetTheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetThemeInvallidStorage()
        {
            TestExecutor<Theme> testExecutor = new TestExecutor<Theme>("GetSlidesTheme", "Storage");
            Theme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetTheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesThemeColorScheme
        /// </summary>
        [Test]
        public void GetColorScheme()
        {
            TestExecutor<ColorScheme> testExecutor = new TestExecutor<ColorScheme>("GetSlidesThemeColorScheme", null);
            ColorScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetColorScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetColorSchemeInvallidName()
        {
            TestExecutor<ColorScheme> testExecutor = new TestExecutor<ColorScheme>("GetSlidesThemeColorScheme", "Name");
            ColorScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetColorScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetColorSchemeInvallidSlideIndex()
        {
            TestExecutor<ColorScheme> testExecutor = new TestExecutor<ColorScheme>("GetSlidesThemeColorScheme", "SlideIndex");
            ColorScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetColorScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetColorSchemeInvallidPassword()
        {
            TestExecutor<ColorScheme> testExecutor = new TestExecutor<ColorScheme>("GetSlidesThemeColorScheme", "Password");
            ColorScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetColorScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetColorSchemeInvallidFolder()
        {
            TestExecutor<ColorScheme> testExecutor = new TestExecutor<ColorScheme>("GetSlidesThemeColorScheme", "Folder");
            ColorScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetColorScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetColorSchemeInvallidStorage()
        {
            TestExecutor<ColorScheme> testExecutor = new TestExecutor<ColorScheme>("GetSlidesThemeColorScheme", "Storage");
            ColorScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetColorScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesThemeFontScheme
        /// </summary>
        [Test]
        public void GetFontScheme()
        {
            TestExecutor<FontScheme> testExecutor = new TestExecutor<FontScheme>("GetSlidesThemeFontScheme", null);
            FontScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFontScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFontSchemeInvallidName()
        {
            TestExecutor<FontScheme> testExecutor = new TestExecutor<FontScheme>("GetSlidesThemeFontScheme", "Name");
            FontScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFontScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFontSchemeInvallidSlideIndex()
        {
            TestExecutor<FontScheme> testExecutor = new TestExecutor<FontScheme>("GetSlidesThemeFontScheme", "SlideIndex");
            FontScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFontScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFontSchemeInvallidPassword()
        {
            TestExecutor<FontScheme> testExecutor = new TestExecutor<FontScheme>("GetSlidesThemeFontScheme", "Password");
            FontScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFontScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFontSchemeInvallidFolder()
        {
            TestExecutor<FontScheme> testExecutor = new TestExecutor<FontScheme>("GetSlidesThemeFontScheme", "Folder");
            FontScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFontScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFontSchemeInvallidStorage()
        {
            TestExecutor<FontScheme> testExecutor = new TestExecutor<FontScheme>("GetSlidesThemeFontScheme", "Storage");
            FontScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFontScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesThemeFormatScheme
        /// </summary>
        [Test]
        public void GetFormatScheme()
        {
            TestExecutor<FormatScheme> testExecutor = new TestExecutor<FormatScheme>("GetSlidesThemeFormatScheme", null);
            FormatScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFormatScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFormatSchemeInvallidName()
        {
            TestExecutor<FormatScheme> testExecutor = new TestExecutor<FormatScheme>("GetSlidesThemeFormatScheme", "Name");
            FormatScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFormatScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFormatSchemeInvallidSlideIndex()
        {
            TestExecutor<FormatScheme> testExecutor = new TestExecutor<FormatScheme>("GetSlidesThemeFormatScheme", "SlideIndex");
            FormatScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFormatScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFormatSchemeInvallidPassword()
        {
            TestExecutor<FormatScheme> testExecutor = new TestExecutor<FormatScheme>("GetSlidesThemeFormatScheme", "Password");
            FormatScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFormatScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFormatSchemeInvallidFolder()
        {
            TestExecutor<FormatScheme> testExecutor = new TestExecutor<FormatScheme>("GetSlidesThemeFormatScheme", "Folder");
            FormatScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFormatScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetFormatSchemeInvallidStorage()
        {
            TestExecutor<FormatScheme> testExecutor = new TestExecutor<FormatScheme>("GetSlidesThemeFormatScheme", "Storage");
            FormatScheme response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetFormatScheme(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesViewProperties
        /// </summary>
        [Test]
        public void GetViewProperties()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("GetSlidesViewProperties", null);
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetViewPropertiesInvallidName()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("GetSlidesViewProperties", "Name");
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetViewPropertiesInvallidPassword()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("GetSlidesViewProperties", "Password");
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetViewPropertiesInvallidFolder()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("GetSlidesViewProperties", "Folder");
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetViewPropertiesInvallidStorage()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("GetSlidesViewProperties", "Storage");
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSubshapeParagraphPortion
        /// </summary>
        [Test]
        public void GetSubshapePortion()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetSubshapeParagraphPortion", null);
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionInvallidName()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetSubshapeParagraphPortion", "Name");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionInvallidSlideIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetSubshapeParagraphPortion", "SlideIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionInvallidShapeIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetSubshapeParagraphPortion", "ShapeIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionInvallidParagraphIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetSubshapeParagraphPortion", "ParagraphIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionInvallidPortionIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetSubshapeParagraphPortion", "PortionIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionInvallidPath()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetSubshapeParagraphPortion", "Path");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionInvallidPassword()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetSubshapeParagraphPortion", "Password");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionInvallidFolder()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetSubshapeParagraphPortion", "Folder");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionInvallidStorage()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("GetSubshapeParagraphPortion", "Storage");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSubshapeParagraphPortions
        /// </summary>
        [Test]
        public void GetSubshapePortions()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetSubshapeParagraphPortions", null);
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionsInvallidName()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetSubshapeParagraphPortions", "Name");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionsInvallidSlideIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetSubshapeParagraphPortions", "SlideIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionsInvallidShapeIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetSubshapeParagraphPortions", "ShapeIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionsInvallidParagraphIndex()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetSubshapeParagraphPortions", "ParagraphIndex");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionsInvallidPath()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetSubshapeParagraphPortions", "Path");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionsInvallidPassword()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetSubshapeParagraphPortions", "Password");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionsInvallidFolder()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetSubshapeParagraphPortions", "Folder");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSubshapePortionsInvallidStorage()
        {
            TestExecutor<Portions> testExecutor = new TestExecutor<Portions>("GetSubshapeParagraphPortions", "Storage");
            Portions response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSubshapePortions(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test MoveFile
        /// </summary>
        [Test]
        public void MoveFile()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFile", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MoveFileInvallidSrcPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFile", "SrcPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MoveFileInvallidDestPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFile", "DestPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MoveFileInvallidSrcStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFile", "SrcStorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MoveFileInvallidDestStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFile", "DestStorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MoveFileInvallidVersionId()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFile", "VersionId");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFile(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test MoveFolder
        /// </summary>
        [Test]
        public void MoveFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFolder", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFolder(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MoveFolderInvallidSrcPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFolder", "SrcPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFolder(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MoveFolderInvallidDestPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFolder", "DestPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFolder(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MoveFolderInvallidSrcStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFolder", "SrcStorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFolder(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MoveFolderInvallidDestStorageName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("MoveFolder", "DestStorageName");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MoveFolder(testExecutor.GetTestValue<string>("SrcPath"), testExecutor.GetTestValue<string>("DestPath"), testExecutor.GetTestValue<string>("SrcStorageName"), testExecutor.GetTestValue<string>("DestStorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test ObjectExists
        /// </summary>
        [Test]
        public void ObjectExists()
        {
            TestExecutor<ObjectExist> testExecutor = new TestExecutor<ObjectExist>("ObjectExists", null);
            ObjectExist response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ObjectExists(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ObjectExistsInvallidPath()
        {
            TestExecutor<ObjectExist> testExecutor = new TestExecutor<ObjectExist>("ObjectExists", "Path");
            ObjectExist response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ObjectExists(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ObjectExistsInvallidStorageName()
        {
            TestExecutor<ObjectExist> testExecutor = new TestExecutor<ObjectExist>("ObjectExists", "StorageName");
            ObjectExist response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ObjectExists(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ObjectExistsInvallidVersionId()
        {
            TestExecutor<ObjectExist> testExecutor = new TestExecutor<ObjectExist>("ObjectExists", "VersionId");
            ObjectExist response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ObjectExists(testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"), testExecutor.GetTestValue<string>("VersionId"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewParagraph
        /// </summary>
        [Test]
        public void CreateParagraph()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewParagraph", null);
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateParagraphInvallidName()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewParagraph", "Name");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewParagraph", "SlideIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewParagraph", "ShapeIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateParagraphInvallidDto()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewParagraph", "Dto");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateParagraphInvallidPosition()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewParagraph", "Position");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateParagraphInvallidPassword()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewParagraph", "Password");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateParagraphInvallidFolder()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewParagraph", "Folder");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateParagraphInvallidStorage()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewParagraph", "Storage");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewPortion
        /// </summary>
        [Test]
        public void CreatePortion()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewPortion", null);
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePortionInvallidName()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewPortion", "Name");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePortionInvallidSlideIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewPortion", "SlideIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePortionInvallidShapeIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewPortion", "ShapeIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePortionInvallidParagraphIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewPortion", "ParagraphIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePortionInvallidDto()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewPortion", "Dto");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePortionInvallidPosition()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewPortion", "Position");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePortionInvallidPassword()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewPortion", "Password");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePortionInvallidFolder()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewPortion", "Folder");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePortionInvallidStorage()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewPortion", "Storage");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewShape
        /// </summary>
        [Test]
        public void CreateShape()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewShape", null);
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateShapeInvallidName()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewShape", "Name");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateShapeInvallidSlideIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewShape", "SlideIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateShapeInvallidDto()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewShape", "Dto");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateShapeInvallidShapeToClone()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewShape", "ShapeToClone");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateShapeInvallidPosition()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewShape", "Position");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateShapeInvallidPassword()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewShape", "Password");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateShapeInvallidFolder()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewShape", "Folder");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateShapeInvallidStorage()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewShape", "Storage");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewSubshape
        /// </summary>
        [Test]
        public void CreateSubshape()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewSubshape", null);
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeInvallidName()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewSubshape", "Name");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeInvallidSlideIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewSubshape", "SlideIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeInvallidPath()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewSubshape", "Path");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeInvallidDto()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewSubshape", "Dto");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeInvallidShapeToClone()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewSubshape", "ShapeToClone");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeInvallidPosition()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewSubshape", "Position");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeInvallidPassword()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewSubshape", "Password");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeInvallidFolder()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewSubshape", "Folder");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeInvallidStorage()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostAddNewSubshape", "Storage");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewSubshapeParagraph
        /// </summary>
        [Test]
        public void CreateSubshapeParagraph()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewSubshapeParagraph", null);
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeParagraphInvallidName()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewSubshapeParagraph", "Name");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewSubshapeParagraph", "SlideIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewSubshapeParagraph", "ShapeIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeParagraphInvallidDto()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewSubshapeParagraph", "Dto");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeParagraphInvallidPath()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewSubshapeParagraph", "Path");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeParagraphInvallidPosition()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewSubshapeParagraph", "Position");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeParagraphInvallidPassword()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewSubshapeParagraph", "Password");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeParagraphInvallidFolder()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewSubshapeParagraph", "Folder");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapeParagraphInvallidStorage()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostAddNewSubshapeParagraph", "Storage");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewSubshapePortion
        /// </summary>
        [Test]
        public void CreateSubshapePortion()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", null);
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapePortionInvallidName()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", "Name");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapePortionInvallidSlideIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", "SlideIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapePortionInvallidShapeIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", "ShapeIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapePortionInvallidParagraphIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", "ParagraphIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapePortionInvallidDto()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", "Dto");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapePortionInvallidPath()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", "Path");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapePortionInvallidPosition()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", "Position");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapePortionInvallidPassword()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", "Password");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapePortionInvallidFolder()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", "Folder");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSubshapePortionInvallidStorage()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostAddNewSubshapePortion", "Storage");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNotesSlide
        /// </summary>
        [Test]
        public void CreateNotesSlide()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostAddNotesSlide", null);
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideInvallidName()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostAddNotesSlide", "Name");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideInvallidSlideIndex()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostAddNotesSlide", "SlideIndex");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideInvallidDto()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostAddNotesSlide", "Dto");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideInvallidPassword()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostAddNotesSlide", "Password");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideInvallidFolder()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostAddNotesSlide", "Folder");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideInvallidStorage()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostAddNotesSlide", "Storage");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAlignShapes
        /// </summary>
        [Test]
        public void AlignShapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("PostAlignShapes", null);
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.AlignShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapesAlignmentType>("AlignmentType"), testExecutor.GetTestValue<bool?>("AlignToSlide"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void AlignShapesInvallidName()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("PostAlignShapes", "Name");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.AlignShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapesAlignmentType>("AlignmentType"), testExecutor.GetTestValue<bool?>("AlignToSlide"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void AlignShapesInvallidSlideIndex()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("PostAlignShapes", "SlideIndex");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.AlignShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapesAlignmentType>("AlignmentType"), testExecutor.GetTestValue<bool?>("AlignToSlide"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void AlignShapesInvallidAlignmentType()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("PostAlignShapes", "AlignmentType");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.AlignShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapesAlignmentType>("AlignmentType"), testExecutor.GetTestValue<bool?>("AlignToSlide"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void AlignShapesInvallidAlignToSlide()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("PostAlignShapes", "AlignToSlide");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.AlignShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapesAlignmentType>("AlignmentType"), testExecutor.GetTestValue<bool?>("AlignToSlide"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void AlignShapesInvallidShapes()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("PostAlignShapes", "Shapes");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.AlignShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapesAlignmentType>("AlignmentType"), testExecutor.GetTestValue<bool?>("AlignToSlide"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void AlignShapesInvallidPassword()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("PostAlignShapes", "Password");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.AlignShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapesAlignmentType>("AlignmentType"), testExecutor.GetTestValue<bool?>("AlignToSlide"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void AlignShapesInvallidFolder()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("PostAlignShapes", "Folder");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.AlignShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapesAlignmentType>("AlignmentType"), testExecutor.GetTestValue<bool?>("AlignToSlide"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void AlignShapesInvallidStorage()
        {
            TestExecutor<Shapes> testExecutor = new TestExecutor<Shapes>("PostAlignShapes", "Storage");
            Shapes response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.AlignShapes(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapesAlignmentType>("AlignmentType"), testExecutor.GetTestValue<bool?>("AlignToSlide"), testExecutor.GetTestValue<List<int>>("Shapes"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostChartCategory
        /// </summary>
        [Test]
        public void CreateChartCategory()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartCategory", null);
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartCategoryInvallidName()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartCategory", "Name");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartCategoryInvallidSlideIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartCategory", "SlideIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartCategoryInvallidShapeIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartCategory", "ShapeIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartCategoryInvallidCategory()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartCategory", "Category");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartCategoryInvallidPassword()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartCategory", "Password");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartCategoryInvallidFolder()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartCategory", "Folder");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartCategoryInvallidStorage()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartCategory", "Storage");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostChartDataPoint
        /// </summary>
        [Test]
        public void CreateChartDataPoint()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartDataPoint", null);
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartDataPointInvallidName()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartDataPoint", "Name");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartDataPointInvallidSlideIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartDataPoint", "SlideIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartDataPointInvallidShapeIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartDataPoint", "ShapeIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartDataPointInvallidSeriesIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartDataPoint", "SeriesIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartDataPointInvallidDataPoint()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartDataPoint", "DataPoint");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartDataPointInvallidPassword()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartDataPoint", "Password");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartDataPointInvallidFolder()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartDataPoint", "Folder");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartDataPointInvallidStorage()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartDataPoint", "Storage");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostChartSeries
        /// </summary>
        [Test]
        public void CreateChartSeries()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartSeries", null);
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartSeriesInvallidName()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartSeries", "Name");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartSeriesInvallidSlideIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartSeries", "SlideIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartSeriesInvallidShapeIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartSeries", "ShapeIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartSeriesInvallidSeries()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartSeries", "Series");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartSeriesInvallidPassword()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartSeries", "Password");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartSeriesInvallidFolder()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartSeries", "Folder");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateChartSeriesInvallidStorage()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PostChartSeries", "Storage");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostCopyLayoutSlideFromSourcePresentation
        /// </summary>
        [Test]
        public void CopyLayoutSlide()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PostCopyLayoutSlideFromSourcePresentation", null);
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyLayoutSlideInvallidName()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PostCopyLayoutSlideFromSourcePresentation", "Name");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyLayoutSlideInvallidCloneFrom()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PostCopyLayoutSlideFromSourcePresentation", "CloneFrom");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyLayoutSlideInvallidCloneFromPosition()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PostCopyLayoutSlideFromSourcePresentation", "CloneFromPosition");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyLayoutSlideInvallidCloneFromPassword()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PostCopyLayoutSlideFromSourcePresentation", "CloneFromPassword");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyLayoutSlideInvallidCloneFromStorage()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PostCopyLayoutSlideFromSourcePresentation", "CloneFromStorage");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyLayoutSlideInvallidPassword()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PostCopyLayoutSlideFromSourcePresentation", "Password");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyLayoutSlideInvallidFolder()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PostCopyLayoutSlideFromSourcePresentation", "Folder");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyLayoutSlideInvallidStorage()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PostCopyLayoutSlideFromSourcePresentation", "Storage");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostCopyMasterSlideFromSourcePresentation
        /// </summary>
        [Test]
        public void CopyMasterSlide()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("PostCopyMasterSlideFromSourcePresentation", null);
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<bool?>("ApplyToAll"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyMasterSlideInvallidName()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("PostCopyMasterSlideFromSourcePresentation", "Name");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<bool?>("ApplyToAll"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyMasterSlideInvallidCloneFrom()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("PostCopyMasterSlideFromSourcePresentation", "CloneFrom");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<bool?>("ApplyToAll"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyMasterSlideInvallidCloneFromPosition()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("PostCopyMasterSlideFromSourcePresentation", "CloneFromPosition");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<bool?>("ApplyToAll"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyMasterSlideInvallidCloneFromPassword()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("PostCopyMasterSlideFromSourcePresentation", "CloneFromPassword");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<bool?>("ApplyToAll"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyMasterSlideInvallidCloneFromStorage()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("PostCopyMasterSlideFromSourcePresentation", "CloneFromStorage");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<bool?>("ApplyToAll"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyMasterSlideInvallidApplyToAll()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("PostCopyMasterSlideFromSourcePresentation", "ApplyToAll");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<bool?>("ApplyToAll"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyMasterSlideInvallidPassword()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("PostCopyMasterSlideFromSourcePresentation", "Password");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<bool?>("ApplyToAll"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyMasterSlideInvallidFolder()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("PostCopyMasterSlideFromSourcePresentation", "Folder");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<bool?>("ApplyToAll"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopyMasterSlideInvallidStorage()
        {
            TestExecutor<MasterSlide> testExecutor = new TestExecutor<MasterSlide>("PostCopyMasterSlideFromSourcePresentation", "Storage");
            MasterSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopyMasterSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("CloneFrom"), testExecutor.GetTestValue<int>("CloneFromPosition"), testExecutor.GetTestValue<string>("CloneFromPassword"), testExecutor.GetTestValue<string>("CloneFromStorage"), testExecutor.GetTestValue<bool?>("ApplyToAll"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostExportImageWithDefaultFormat
        /// </summary>
        [Test]
        public void DownloadImageDefaultFormatOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImageWithDefaultFormat", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageDefaultFormatOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageDefaultFormatOnlineInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImageWithDefaultFormat", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageDefaultFormatOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageDefaultFormatOnlineInvallidIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImageWithDefaultFormat", "Index");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageDefaultFormatOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageDefaultFormatOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImageWithDefaultFormat", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageDefaultFormatOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostExportImageWithFormat
        /// </summary>
        [Test]
        public void DownloadImageOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImageWithFormat", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageOnlineInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImageWithFormat", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageOnlineInvallidIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImageWithFormat", "Index");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageOnlineInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImageWithFormat", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImageOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImageWithFormat", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImageOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("Index"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostExportImagesFromRequestWithFormat
        /// </summary>
        [Test]
        public void DownloadImagesOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesFromRequestWithFormat", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesOnlineInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesFromRequestWithFormat", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesOnlineInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesFromRequestWithFormat", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesFromRequestWithFormat", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostExportImagesWithDefaultFormat
        /// </summary>
        [Test]
        public void DownloadImagesDefaultFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithDefaultFormat", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesDefaultFormatInvallidName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithDefaultFormat", "Name");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesDefaultFormatInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithDefaultFormat", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesDefaultFormatInvallidFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithDefaultFormat", "Folder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesDefaultFormatInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithDefaultFormat", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesDefaultFormat(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostExportImagesWithFormat
        /// </summary>
        [Test]
        public void DownloadImages()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithFormat", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesInvallidName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithFormat", "Name");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithFormat", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithFormat", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesInvallidFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithFormat", "Folder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportImagesWithFormat", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImages(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ImageExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostExportShape
        /// </summary>
        [Test]
        public void DownloadShapeOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeOnlineInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeOnlineInvallidSlideIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", "SlideIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeOnlineInvallidShapeIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", "ShapeIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeOnlineInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeOnlineInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeOnlineInvallidScaleX()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", "ScaleX");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeOnlineInvallidScaleY()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", "ScaleY");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeOnlineInvallidBounds()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", "Bounds");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeOnlineInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportShape", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostExportSlide
        /// </summary>
        [Test]
        public void DownloadSlideOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportSlide", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideOnlineInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportSlide", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideOnlineInvallidSlideIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportSlide", "SlideIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideOnlineInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportSlide", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideOnlineInvallidWidth()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportSlide", "Width");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideOnlineInvallidHeight()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportSlide", "Height");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportSlide", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideOnlineInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportSlide", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideOnlineInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostExportSlide", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostGetNotesSlide
        /// </summary>
        [Test]
        public void GetNotesSlideOnline()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostGetNotesSlide", null);
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideOnlineInvallidDocument()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostGetNotesSlide", "Document");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideOnlineInvallidSlideIndex()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostGetNotesSlide", "SlideIndex");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideOnlineInvallidPassword()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PostGetNotesSlide", "Password");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostGetNotesSlideExists
        /// </summary>
        [Test]
        public void NotesSlideExistsOnline()
        {
            TestExecutor<EntityExists> testExecutor = new TestExecutor<EntityExists>("PostGetNotesSlideExists", null);
            EntityExists response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.NotesSlideExistsOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void NotesSlideExistsOnlineInvallidDocument()
        {
            TestExecutor<EntityExists> testExecutor = new TestExecutor<EntityExists>("PostGetNotesSlideExists", "Document");
            EntityExists response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.NotesSlideExistsOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void NotesSlideExistsOnlineInvallidSlideIndex()
        {
            TestExecutor<EntityExists> testExecutor = new TestExecutor<EntityExists>("PostGetNotesSlideExists", "SlideIndex");
            EntityExists response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.NotesSlideExistsOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void NotesSlideExistsOnlineInvallidPassword()
        {
            TestExecutor<EntityExists> testExecutor = new TestExecutor<EntityExists>("PostGetNotesSlideExists", "Password");
            EntityExists response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.NotesSlideExistsOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostGetNotesSlideWithFormat
        /// </summary>
        [Test]
        public void DownloadNotesSlideOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostGetNotesSlideWithFormat", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideOnlineInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostGetNotesSlideWithFormat", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideOnlineInvallidSlideIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostGetNotesSlideWithFormat", "SlideIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideOnlineInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostGetNotesSlideWithFormat", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideOnlineInvallidWidth()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostGetNotesSlideWithFormat", "Width");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideOnlineInvallidHeight()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostGetNotesSlideWithFormat", "Height");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostGetNotesSlideWithFormat", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideOnlineInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostGetNotesSlideWithFormat", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostImagesFromRequestWithDefaultFormat
        /// </summary>
        [Test]
        public void DownloadImagesDefaultFormatOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostImagesFromRequestWithDefaultFormat", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesDefaultFormatOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesDefaultFormatOnlineInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostImagesFromRequestWithDefaultFormat", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesDefaultFormatOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadImagesDefaultFormatOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostImagesFromRequestWithDefaultFormat", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadImagesDefaultFormatOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostNotesSlideAddNewParagraph
        /// </summary>
        [Test]
        public void CreateNotesSlideParagraph()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostNotesSlideAddNewParagraph", null);
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideParagraphInvallidName()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostNotesSlideAddNewParagraph", "Name");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostNotesSlideAddNewParagraph", "SlideIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostNotesSlideAddNewParagraph", "ShapeIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideParagraphInvallidDto()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostNotesSlideAddNewParagraph", "Dto");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideParagraphInvallidPosition()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostNotesSlideAddNewParagraph", "Position");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideParagraphInvallidPassword()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostNotesSlideAddNewParagraph", "Password");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideParagraphInvallidFolder()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostNotesSlideAddNewParagraph", "Folder");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideParagraphInvallidStorage()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PostNotesSlideAddNewParagraph", "Storage");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostNotesSlideAddNewPortion
        /// </summary>
        [Test]
        public void CreateNotesSlidePortion()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostNotesSlideAddNewPortion", null);
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlidePortionInvallidName()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostNotesSlideAddNewPortion", "Name");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlidePortionInvallidSlideIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostNotesSlideAddNewPortion", "SlideIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlidePortionInvallidShapeIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostNotesSlideAddNewPortion", "ShapeIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlidePortionInvallidParagraphIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostNotesSlideAddNewPortion", "ParagraphIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlidePortionInvallidDto()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostNotesSlideAddNewPortion", "Dto");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlidePortionInvallidPosition()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostNotesSlideAddNewPortion", "Position");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlidePortionInvallidPassword()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostNotesSlideAddNewPortion", "Password");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlidePortionInvallidFolder()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostNotesSlideAddNewPortion", "Folder");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlidePortionInvallidStorage()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PostNotesSlideAddNewPortion", "Storage");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostNotesSlideAddNewShape
        /// </summary>
        [Test]
        public void CreateNotesSlideShape()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostNotesSlideAddNewShape", null);
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideShapeInvallidName()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostNotesSlideAddNewShape", "Name");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideShapeInvallidSlideIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostNotesSlideAddNewShape", "SlideIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideShapeInvallidDto()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostNotesSlideAddNewShape", "Dto");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideShapeInvallidShapeToClone()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostNotesSlideAddNewShape", "ShapeToClone");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideShapeInvallidPosition()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostNotesSlideAddNewShape", "Position");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideShapeInvallidPassword()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostNotesSlideAddNewShape", "Password");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideShapeInvallidFolder()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostNotesSlideAddNewShape", "Folder");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateNotesSlideShapeInvallidStorage()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PostNotesSlideAddNewShape", "Storage");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<int?>("ShapeToClone"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostNotesSlideShapeSaveAs
        /// </summary>
        [Test]
        public void DownloadNotesSlideShape()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "Name");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidSlideIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "SlideIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidShapeIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "ShapeIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidOptions()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "Options");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidScaleX()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "ScaleX");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidScaleY()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "ScaleY");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidBounds()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "Bounds");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "Folder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadNotesSlideShapeInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostNotesSlideShapeSaveAs", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostPresentationMerge
        /// </summary>
        [Test]
        public void Merge()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostPresentationMerge", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Merge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<PresentationsMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MergeInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostPresentationMerge", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Merge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<PresentationsMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MergeInvallidRequest()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostPresentationMerge", "Request");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Merge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<PresentationsMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MergeInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostPresentationMerge", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Merge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<PresentationsMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MergeInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostPresentationMerge", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Merge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<PresentationsMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MergeInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostPresentationMerge", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Merge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<PresentationsMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostPresentationReplaceText
        /// </summary>
        [Test]
        public void ReplacePresentationTextOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationReplaceText", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextOnlineInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationReplaceText", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextOnlineInvallidOldValue()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationReplaceText", "OldValue");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextOnlineInvallidNewValue()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationReplaceText", "NewValue");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextOnlineInvallidIgnoreCase()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationReplaceText", "IgnoreCase");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationReplaceText", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostPresentationSplit
        /// </summary>
        [Test]
        public void SplitOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationSplit", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitOnlineInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationSplit", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitOnlineInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationSplit", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitOnlineInvallidWidth()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationSplit", "Width");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitOnlineInvallidHeight()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationSplit", "Height");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitOnlineInvallidFrom()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationSplit", "From");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitOnlineInvallidTo()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationSplit", "To");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationSplit", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitOnlineInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationSplit", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitOnlineInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostPresentationSplit", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSection
        /// </summary>
        [Test]
        public void CreateSection()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSection", null);
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSectionInvallidName()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSection", "Name");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSectionInvallidSectionName()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSection", "SectionName");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSectionInvallidSlideIndex()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSection", "SlideIndex");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSectionInvallidPassword()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSection", "Password");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSectionInvallidFolder()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSection", "Folder");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSectionInvallidStorage()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSection", "Storage");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSectionMove
        /// </summary>
        [Test]
        public void MoveSection()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSectionMove", null);
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSectionInvallidName()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSectionMove", "Name");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSectionInvallidSectionIndex()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSectionMove", "SectionIndex");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSectionInvallidNewPosition()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSectionMove", "NewPosition");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSectionInvallidPassword()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSectionMove", "Password");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSectionInvallidFolder()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSectionMove", "Folder");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSectionInvallidStorage()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PostSectionMove", "Storage");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostShapeSaveAs
        /// </summary>
        [Test]
        public void DownloadShape()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "Name");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidSlideIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "SlideIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidShapeIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "ShapeIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidOptions()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "Options");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidScaleX()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "ScaleX");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidScaleY()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "ScaleY");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidBounds()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "Bounds");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "Folder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadShapeInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostShapeSaveAs", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlideAnimationEffect
        /// </summary>
        [Test]
        public void CreateAnimationEffect()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationEffect", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationEffectInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationEffect", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationEffectInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationEffect", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationEffectInvallidEffect()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationEffect", "Effect");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationEffectInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationEffect", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationEffectInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationEffect", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationEffectInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationEffect", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlideAnimationInteractiveSequence
        /// </summary>
        [Test]
        public void CreateAnimationInteractiveSequence()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequence", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<InteractiveSequence>("Sequence"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequence", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<InteractiveSequence>("Sequence"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequence", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<InteractiveSequence>("Sequence"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceInvallidSequence()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequence", "Sequence");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<InteractiveSequence>("Sequence"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequence", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<InteractiveSequence>("Sequence"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequence", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<InteractiveSequence>("Sequence"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequence", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequence(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<InteractiveSequence>("Sequence"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlideAnimationInteractiveSequenceEffect
        /// </summary>
        [Test]
        public void CreateAnimationInteractiveSequenceEffect()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequenceEffect", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceEffectInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequenceEffect", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceEffectInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequenceEffect", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceEffectInvallidSequenceIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequenceEffect", "SequenceIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceEffectInvallidEffect()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequenceEffect", "Effect");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceEffectInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequenceEffect", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceEffectInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequenceEffect", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateAnimationInteractiveSequenceEffectInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PostSlideAnimationInteractiveSequenceEffect", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlideReplaceText
        /// </summary>
        [Test]
        public void ReplaceSlideTextOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideReplaceText", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextOnlineInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideReplaceText", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextOnlineInvallidSlideIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideReplaceText", "SlideIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextOnlineInvallidOldValue()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideReplaceText", "OldValue");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextOnlineInvallidNewValue()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideReplaceText", "NewValue");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextOnlineInvallidIgnoreCase()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideReplaceText", "IgnoreCase");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideReplaceText", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideTextOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlideSaveAs
        /// </summary>
        [Test]
        public void DownloadSlide()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideInvallidName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", "Name");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideInvallidSlideIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", "SlideIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideInvallidOptions()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", "Options");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideInvallidWidth()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", "Width");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideInvallidHeight()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", "Height");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideInvallidFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", "Folder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSlideInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlideSaveAs", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesAdd
        /// </summary>
        [Test]
        public void CreateSlide()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesAdd", null);
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("LayoutAlias"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSlideInvallidName()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesAdd", "Name");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("LayoutAlias"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSlideInvallidLayoutAlias()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesAdd", "LayoutAlias");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("LayoutAlias"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSlideInvallidPosition()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesAdd", "Position");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("LayoutAlias"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSlideInvallidPassword()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesAdd", "Password");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("LayoutAlias"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSlideInvallidFolder()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesAdd", "Folder");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("LayoutAlias"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreateSlideInvallidStorage()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesAdd", "Storage");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("LayoutAlias"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesConvert
        /// </summary>
        [Test]
        public void Convert()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesConvert", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Convert(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ConvertInvallidDocument()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesConvert", "Document");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Convert(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ConvertInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesConvert", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Convert(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ConvertInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesConvert", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Convert(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ConvertInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesConvert", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Convert(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ConvertInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesConvert", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Convert(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesCopy
        /// </summary>
        [Test]
        public void CopySlide()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesCopy", null);
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopySlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideToCopy"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Source"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopySlideInvallidName()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesCopy", "Name");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopySlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideToCopy"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Source"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopySlideInvallidSlideToCopy()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesCopy", "SlideToCopy");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopySlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideToCopy"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Source"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopySlideInvallidPosition()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesCopy", "Position");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopySlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideToCopy"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Source"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopySlideInvallidSource()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesCopy", "Source");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopySlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideToCopy"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Source"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopySlideInvallidSourcePassword()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesCopy", "SourcePassword");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopySlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideToCopy"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Source"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopySlideInvallidSourceStorage()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesCopy", "SourceStorage");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopySlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideToCopy"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Source"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopySlideInvallidPassword()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesCopy", "Password");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopySlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideToCopy"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Source"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopySlideInvallidFolder()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesCopy", "Folder");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopySlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideToCopy"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Source"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CopySlideInvallidStorage()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesCopy", "Storage");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CopySlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideToCopy"), testExecutor.GetTestValue<int?>("Position"), testExecutor.GetTestValue<string>("Source"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesDocument
        /// </summary>
        [Test]
        public void CreatePresentation()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocument", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Data"), testExecutor.GetTestValue<string>("InputPassword"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocument", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Data"), testExecutor.GetTestValue<string>("InputPassword"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationInvallidData()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocument", "Data");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Data"), testExecutor.GetTestValue<string>("InputPassword"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationInvallidInputPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocument", "InputPassword");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Data"), testExecutor.GetTestValue<string>("InputPassword"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocument", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Data"), testExecutor.GetTestValue<string>("InputPassword"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocument", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Data"), testExecutor.GetTestValue<string>("InputPassword"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocument", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Data"), testExecutor.GetTestValue<string>("InputPassword"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesDocumentFromHtml
        /// </summary>
        [Test]
        public void ImportFromHtml()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromHtml", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ImportFromHtmlInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromHtml", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ImportFromHtmlInvallidHtml()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromHtml", "Html");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ImportFromHtmlInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromHtml", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ImportFromHtmlInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromHtml", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ImportFromHtmlInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromHtml", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesDocumentFromPdf
        /// </summary>
        [Test]
        public void ImportFromPdf()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromPdf", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromPdf(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Pdf"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ImportFromPdfInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromPdf", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromPdf(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Pdf"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ImportFromPdfInvallidPdf()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromPdf", "Pdf");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromPdf(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Pdf"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ImportFromPdfInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromPdf", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromPdf(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Pdf"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ImportFromPdfInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromPdf", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromPdf(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Pdf"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ImportFromPdfInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromPdf", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ImportFromPdf(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<System.IO.Stream>("Pdf"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesDocumentFromSource
        /// </summary>
        [Test]
        public void CreatePresentationFromSource()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromSource", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromSource(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SourcePath"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromSourceInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromSource", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromSource(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SourcePath"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromSourceInvallidSourcePath()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromSource", "SourcePath");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromSource(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SourcePath"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromSourceInvallidSourcePassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromSource", "SourcePassword");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromSource(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SourcePath"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromSourceInvallidSourceStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromSource", "SourceStorage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromSource(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SourcePath"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromSourceInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromSource", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromSource(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SourcePath"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromSourceInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromSource", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromSource(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SourcePath"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromSourceInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromSource", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromSource(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("SourcePath"), testExecutor.GetTestValue<string>("SourcePassword"), testExecutor.GetTestValue<string>("SourceStorage"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesDocumentFromTemplate
        /// </summary>
        [Test]
        public void CreatePresentationFromTemplate()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromTemplate", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromTemplate(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("TemplatePath"), testExecutor.GetTestValue<string>("Data"), testExecutor.GetTestValue<string>("TemplatePassword"), testExecutor.GetTestValue<string>("TemplateStorage"), testExecutor.GetTestValue<bool?>("IsImageDataEmbedded"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromTemplateInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromTemplate", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromTemplate(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("TemplatePath"), testExecutor.GetTestValue<string>("Data"), testExecutor.GetTestValue<string>("TemplatePassword"), testExecutor.GetTestValue<string>("TemplateStorage"), testExecutor.GetTestValue<bool?>("IsImageDataEmbedded"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromTemplateInvallidTemplatePath()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromTemplate", "TemplatePath");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromTemplate(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("TemplatePath"), testExecutor.GetTestValue<string>("Data"), testExecutor.GetTestValue<string>("TemplatePassword"), testExecutor.GetTestValue<string>("TemplateStorage"), testExecutor.GetTestValue<bool?>("IsImageDataEmbedded"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromTemplateInvallidData()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromTemplate", "Data");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromTemplate(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("TemplatePath"), testExecutor.GetTestValue<string>("Data"), testExecutor.GetTestValue<string>("TemplatePassword"), testExecutor.GetTestValue<string>("TemplateStorage"), testExecutor.GetTestValue<bool?>("IsImageDataEmbedded"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromTemplateInvallidTemplatePassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromTemplate", "TemplatePassword");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromTemplate(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("TemplatePath"), testExecutor.GetTestValue<string>("Data"), testExecutor.GetTestValue<string>("TemplatePassword"), testExecutor.GetTestValue<string>("TemplateStorage"), testExecutor.GetTestValue<bool?>("IsImageDataEmbedded"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromTemplateInvallidTemplateStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromTemplate", "TemplateStorage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromTemplate(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("TemplatePath"), testExecutor.GetTestValue<string>("Data"), testExecutor.GetTestValue<string>("TemplatePassword"), testExecutor.GetTestValue<string>("TemplateStorage"), testExecutor.GetTestValue<bool?>("IsImageDataEmbedded"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromTemplateInvallidIsImageDataEmbedded()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromTemplate", "IsImageDataEmbedded");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromTemplate(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("TemplatePath"), testExecutor.GetTestValue<string>("Data"), testExecutor.GetTestValue<string>("TemplatePassword"), testExecutor.GetTestValue<string>("TemplateStorage"), testExecutor.GetTestValue<bool?>("IsImageDataEmbedded"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromTemplateInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromTemplate", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromTemplate(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("TemplatePath"), testExecutor.GetTestValue<string>("Data"), testExecutor.GetTestValue<string>("TemplatePassword"), testExecutor.GetTestValue<string>("TemplateStorage"), testExecutor.GetTestValue<bool?>("IsImageDataEmbedded"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromTemplateInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromTemplate", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromTemplate(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("TemplatePath"), testExecutor.GetTestValue<string>("Data"), testExecutor.GetTestValue<string>("TemplatePassword"), testExecutor.GetTestValue<string>("TemplateStorage"), testExecutor.GetTestValue<bool?>("IsImageDataEmbedded"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void CreatePresentationFromTemplateInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PostSlidesDocumentFromTemplate", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.CreatePresentationFromTemplate(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("TemplatePath"), testExecutor.GetTestValue<string>("Data"), testExecutor.GetTestValue<string>("TemplatePassword"), testExecutor.GetTestValue<string>("TemplateStorage"), testExecutor.GetTestValue<bool?>("IsImageDataEmbedded"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesMerge
        /// </summary>
        [Test]
        public void MergeOnline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesMerge", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MergeOnline(testExecutor.GetTestValue<List<FileInfo>>("Files"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MergeOnlineInvallidFiles()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesMerge", "Files");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MergeOnline(testExecutor.GetTestValue<List<FileInfo>>("Files"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MergeOnlineInvallidRequest()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesMerge", "Request");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MergeOnline(testExecutor.GetTestValue<List<FileInfo>>("Files"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MergeOnlineInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesMerge", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MergeOnline(testExecutor.GetTestValue<List<FileInfo>>("Files"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesPipeline
        /// </summary>
        [Test]
        public void Pipeline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesPipeline", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Pipeline(testExecutor.GetTestValue<Pipeline>("Pipeline"), testExecutor.GetTestValue<List<FileInfo>>("Files"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PipelineInvallidPipeline()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesPipeline", "Pipeline");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Pipeline(testExecutor.GetTestValue<Pipeline>("Pipeline"), testExecutor.GetTestValue<List<FileInfo>>("Files"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PipelineInvallidFiles()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesPipeline", "Files");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Pipeline(testExecutor.GetTestValue<Pipeline>("Pipeline"), testExecutor.GetTestValue<List<FileInfo>>("Files"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesPresentationReplaceText
        /// </summary>
        [Test]
        public void ReplacePresentationText()
        {
            TestExecutor<DocumentReplaceResult> testExecutor = new TestExecutor<DocumentReplaceResult>("PostSlidesPresentationReplaceText", null);
            DocumentReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextInvallidName()
        {
            TestExecutor<DocumentReplaceResult> testExecutor = new TestExecutor<DocumentReplaceResult>("PostSlidesPresentationReplaceText", "Name");
            DocumentReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextInvallidOldValue()
        {
            TestExecutor<DocumentReplaceResult> testExecutor = new TestExecutor<DocumentReplaceResult>("PostSlidesPresentationReplaceText", "OldValue");
            DocumentReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextInvallidNewValue()
        {
            TestExecutor<DocumentReplaceResult> testExecutor = new TestExecutor<DocumentReplaceResult>("PostSlidesPresentationReplaceText", "NewValue");
            DocumentReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextInvallidIgnoreCase()
        {
            TestExecutor<DocumentReplaceResult> testExecutor = new TestExecutor<DocumentReplaceResult>("PostSlidesPresentationReplaceText", "IgnoreCase");
            DocumentReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextInvallidPassword()
        {
            TestExecutor<DocumentReplaceResult> testExecutor = new TestExecutor<DocumentReplaceResult>("PostSlidesPresentationReplaceText", "Password");
            DocumentReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextInvallidFolder()
        {
            TestExecutor<DocumentReplaceResult> testExecutor = new TestExecutor<DocumentReplaceResult>("PostSlidesPresentationReplaceText", "Folder");
            DocumentReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplacePresentationTextInvallidStorage()
        {
            TestExecutor<DocumentReplaceResult> testExecutor = new TestExecutor<DocumentReplaceResult>("PostSlidesPresentationReplaceText", "Storage");
            DocumentReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplacePresentationText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesReorder
        /// </summary>
        [Test]
        public void MoveSlide()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorder", null);
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSlideInvallidName()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorder", "Name");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSlideInvallidSlideIndex()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorder", "SlideIndex");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSlideInvallidNewPosition()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorder", "NewPosition");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSlideInvallidPassword()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorder", "Password");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSlideInvallidFolder()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorder", "Folder");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void MoveSlideInvallidStorage()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorder", "Storage");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.MoveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("NewPosition"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesReorderMany
        /// </summary>
        [Test]
        public void ReorderSlides()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorderMany", null);
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReorderSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("OldPositions"), testExecutor.GetTestValue<List<int>>("NewPositions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReorderSlidesInvallidName()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorderMany", "Name");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReorderSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("OldPositions"), testExecutor.GetTestValue<List<int>>("NewPositions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReorderSlidesInvallidOldPositions()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorderMany", "OldPositions");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReorderSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("OldPositions"), testExecutor.GetTestValue<List<int>>("NewPositions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReorderSlidesInvallidNewPositions()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorderMany", "NewPositions");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReorderSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("OldPositions"), testExecutor.GetTestValue<List<int>>("NewPositions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReorderSlidesInvallidPassword()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorderMany", "Password");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReorderSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("OldPositions"), testExecutor.GetTestValue<List<int>>("NewPositions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReorderSlidesInvallidFolder()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorderMany", "Folder");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReorderSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("OldPositions"), testExecutor.GetTestValue<List<int>>("NewPositions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReorderSlidesInvallidStorage()
        {
            TestExecutor<Model.Slides> testExecutor = new TestExecutor<Model.Slides>("PostSlidesReorderMany", "Storage");
            Model.Slides response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReorderSlides(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<List<int>>("OldPositions"), testExecutor.GetTestValue<List<int>>("NewPositions"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesSaveAs
        /// </summary>
        [Test]
        public void DownloadPresentation()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesSaveAs", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadPresentationInvallidName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesSaveAs", "Name");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadPresentationInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesSaveAs", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadPresentationInvallidOptions()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesSaveAs", "Options");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadPresentationInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesSaveAs", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadPresentationInvallidFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesSaveAs", "Folder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadPresentationInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesSaveAs", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadPresentationInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSlidesSaveAs", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadPresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesSetDocumentProperties
        /// </summary>
        [Test]
        public void SetDocumentProperties()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("PostSlidesSetDocumentProperties", null);
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<DocumentProperties>("Properties"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertiesInvallidName()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("PostSlidesSetDocumentProperties", "Name");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<DocumentProperties>("Properties"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertiesInvallidProperties()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("PostSlidesSetDocumentProperties", "Properties");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<DocumentProperties>("Properties"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertiesInvallidPassword()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("PostSlidesSetDocumentProperties", "Password");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<DocumentProperties>("Properties"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertiesInvallidFolder()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("PostSlidesSetDocumentProperties", "Folder");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<DocumentProperties>("Properties"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertiesInvallidStorage()
        {
            TestExecutor<DocumentProperties> testExecutor = new TestExecutor<DocumentProperties>("PostSlidesSetDocumentProperties", "Storage");
            DocumentProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<DocumentProperties>("Properties"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesSlideReplaceText
        /// </summary>
        [Test]
        public void ReplaceSlideText()
        {
            TestExecutor<SlideReplaceResult> testExecutor = new TestExecutor<SlideReplaceResult>("PostSlidesSlideReplaceText", null);
            SlideReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextInvallidName()
        {
            TestExecutor<SlideReplaceResult> testExecutor = new TestExecutor<SlideReplaceResult>("PostSlidesSlideReplaceText", "Name");
            SlideReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextInvallidSlideIndex()
        {
            TestExecutor<SlideReplaceResult> testExecutor = new TestExecutor<SlideReplaceResult>("PostSlidesSlideReplaceText", "SlideIndex");
            SlideReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextInvallidOldValue()
        {
            TestExecutor<SlideReplaceResult> testExecutor = new TestExecutor<SlideReplaceResult>("PostSlidesSlideReplaceText", "OldValue");
            SlideReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextInvallidNewValue()
        {
            TestExecutor<SlideReplaceResult> testExecutor = new TestExecutor<SlideReplaceResult>("PostSlidesSlideReplaceText", "NewValue");
            SlideReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextInvallidIgnoreCase()
        {
            TestExecutor<SlideReplaceResult> testExecutor = new TestExecutor<SlideReplaceResult>("PostSlidesSlideReplaceText", "IgnoreCase");
            SlideReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextInvallidPassword()
        {
            TestExecutor<SlideReplaceResult> testExecutor = new TestExecutor<SlideReplaceResult>("PostSlidesSlideReplaceText", "Password");
            SlideReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextInvallidFolder()
        {
            TestExecutor<SlideReplaceResult> testExecutor = new TestExecutor<SlideReplaceResult>("PostSlidesSlideReplaceText", "Folder");
            SlideReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void ReplaceSlideTextInvallidStorage()
        {
            TestExecutor<SlideReplaceResult> testExecutor = new TestExecutor<SlideReplaceResult>("PostSlidesSlideReplaceText", "Storage");
            SlideReplaceResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.ReplaceSlideText(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("OldValue"), testExecutor.GetTestValue<string>("NewValue"), testExecutor.GetTestValue<bool?>("IgnoreCase"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesSplit
        /// </summary>
        [Test]
        public void Split()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", null);
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidName()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "Name");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidOptions()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "Options");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidFormat()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "Format");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidWidth()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "Width");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidHeight()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "Height");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidFrom()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "From");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidTo()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "To");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidDestFolder()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "DestFolder");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidPassword()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "Password");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidFolder()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "Folder");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidStorage()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "Storage");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitInvallidFontsFolder()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PostSlidesSplit", "FontsFolder");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.Split(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<SlideExportFormat?>("Format"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSubshapeSaveAs
        /// </summary>
        [Test]
        public void DownloadSubshape()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", null);
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidName()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "Name");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidSlideIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "SlideIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidShapeIndex()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "ShapeIndex");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidFormat()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "Format");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidPath()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "Path");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidOptions()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "Options");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidScaleX()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "ScaleX");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidScaleY()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "ScaleY");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidBounds()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "Bounds");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidPassword()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "Password");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "Folder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidStorage()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "Storage");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DownloadSubshapeInvallidFontsFolder()
        {
            TestExecutor<System.IO.Stream> testExecutor = new TestExecutor<System.IO.Stream>("PostSubshapeSaveAs", "FontsFolder");
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DownloadSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutChartCategory
        /// </summary>
        [Test]
        public void UpdateChartCategory()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartCategory", null);
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartCategoryInvallidName()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartCategory", "Name");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartCategoryInvallidSlideIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartCategory", "SlideIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartCategoryInvallidShapeIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartCategory", "ShapeIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartCategoryInvallidCategoryIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartCategory", "CategoryIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartCategoryInvallidCategory()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartCategory", "Category");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartCategoryInvallidPassword()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartCategory", "Password");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartCategoryInvallidFolder()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartCategory", "Folder");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartCategoryInvallidStorage()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartCategory", "Storage");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartCategory(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("CategoryIndex"), testExecutor.GetTestValue<ChartCategory>("Category"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutChartDataPoint
        /// </summary>
        [Test]
        public void UpdateChartDataPoint()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartDataPoint", null);
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartDataPointInvallidName()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartDataPoint", "Name");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartDataPointInvallidSlideIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartDataPoint", "SlideIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartDataPointInvallidShapeIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartDataPoint", "ShapeIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartDataPointInvallidSeriesIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartDataPoint", "SeriesIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartDataPointInvallidPointIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartDataPoint", "PointIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartDataPointInvallidDataPoint()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartDataPoint", "DataPoint");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartDataPointInvallidPassword()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartDataPoint", "Password");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartDataPointInvallidFolder()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartDataPoint", "Folder");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartDataPointInvallidStorage()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartDataPoint", "Storage");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartDataPoint(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<int>("PointIndex"), testExecutor.GetTestValue<DataPoint>("DataPoint"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutChartSeries
        /// </summary>
        [Test]
        public void UpdateChartSeries()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartSeries", null);
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartSeriesInvallidName()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartSeries", "Name");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartSeriesInvallidSlideIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartSeries", "SlideIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartSeriesInvallidShapeIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartSeries", "ShapeIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartSeriesInvallidSeriesIndex()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartSeries", "SeriesIndex");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartSeriesInvallidSeries()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartSeries", "Series");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartSeriesInvallidPassword()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartSeries", "Password");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartSeriesInvallidFolder()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartSeries", "Folder");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateChartSeriesInvallidStorage()
        {
            TestExecutor<Chart> testExecutor = new TestExecutor<Chart>("PutChartSeries", "Storage");
            Chart response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateChartSeries(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("SeriesIndex"), testExecutor.GetTestValue<Series>("Series"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutExportShape
        /// </summary>
        [Test]
        public void SaveShapeOnline()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidDocument()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "Document");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidSlideIndex()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "SlideIndex");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidShapeIndex()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "ShapeIndex");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidFormat()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "Format");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidOutPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "OutPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidPassword()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "Password");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidStorage()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "Storage");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidScaleX()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "ScaleX");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidScaleY()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "ScaleY");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidBounds()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "Bounds");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeOnlineInvallidFontsFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportShape", "FontsFolder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShapeOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test PutExportSlide
        /// </summary>
        [Test]
        public void SaveSlideOnline()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportSlide", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideOnlineInvallidDocument()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportSlide", "Document");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideOnlineInvallidSlideIndex()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportSlide", "SlideIndex");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideOnlineInvallidFormat()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportSlide", "Format");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideOnlineInvallidOutPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportSlide", "OutPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideOnlineInvallidWidth()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportSlide", "Width");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideOnlineInvallidHeight()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportSlide", "Height");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideOnlineInvallidPassword()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportSlide", "Password");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideOnlineInvallidStorage()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportSlide", "Storage");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideOnlineInvallidFontsFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutExportSlide", "FontsFolder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlideOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test PutLayoutSlide
        /// </summary>
        [Test]
        public void UpdateLayoutSlide()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PutLayoutSlide", null);
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<LayoutSlide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateLayoutSlideInvallidName()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PutLayoutSlide", "Name");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<LayoutSlide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateLayoutSlideInvallidSlideIndex()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PutLayoutSlide", "SlideIndex");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<LayoutSlide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateLayoutSlideInvallidSlideDto()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PutLayoutSlide", "SlideDto");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<LayoutSlide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateLayoutSlideInvallidPassword()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PutLayoutSlide", "Password");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<LayoutSlide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateLayoutSlideInvallidFolder()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PutLayoutSlide", "Folder");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<LayoutSlide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateLayoutSlideInvallidStorage()
        {
            TestExecutor<LayoutSlide> testExecutor = new TestExecutor<LayoutSlide>("PutLayoutSlide", "Storage");
            LayoutSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateLayoutSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<LayoutSlide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutNotesSlideHeaderFooter
        /// </summary>
        [Test]
        public void SetNotesSlideHeaderFooter()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("PutNotesSlideHeaderFooter", null);
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideHeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetNotesSlideHeaderFooterInvallidName()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("PutNotesSlideHeaderFooter", "Name");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideHeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetNotesSlideHeaderFooterInvallidSlideIndex()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("PutNotesSlideHeaderFooter", "SlideIndex");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideHeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetNotesSlideHeaderFooterInvallidDto()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("PutNotesSlideHeaderFooter", "Dto");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideHeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetNotesSlideHeaderFooterInvallidPassword()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("PutNotesSlideHeaderFooter", "Password");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideHeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetNotesSlideHeaderFooterInvallidFolder()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("PutNotesSlideHeaderFooter", "Folder");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideHeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetNotesSlideHeaderFooterInvallidStorage()
        {
            TestExecutor<NotesSlideHeaderFooter> testExecutor = new TestExecutor<NotesSlideHeaderFooter>("PutNotesSlideHeaderFooter", "Storage");
            NotesSlideHeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetNotesSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlideHeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutNotesSlideShapeSaveAs
        /// </summary>
        [Test]
        public void SaveNotesSlideShape()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "Name");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidSlideIndex()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "SlideIndex");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidShapeIndex()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "ShapeIndex");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidFormat()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "Format");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidOutPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "OutPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidOptions()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "Options");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidScaleX()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "ScaleX");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidScaleY()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "ScaleY");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidBounds()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "Bounds");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidPassword()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "Password");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "Folder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidStorage()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "Storage");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveNotesSlideShapeInvallidFontsFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutNotesSlideShapeSaveAs", "FontsFolder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test PutPresentationMerge
        /// </summary>
        [Test]
        public void OrderedMerge()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutPresentationMerge", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.OrderedMerge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void OrderedMergeInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutPresentationMerge", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.OrderedMerge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void OrderedMergeInvallidRequest()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutPresentationMerge", "Request");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.OrderedMerge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void OrderedMergeInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutPresentationMerge", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.OrderedMerge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void OrderedMergeInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutPresentationMerge", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.OrderedMerge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void OrderedMergeInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutPresentationMerge", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.OrderedMerge(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutPresentationSplit
        /// </summary>
        [Test]
        public void SplitAndSaveOnline()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", null);
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitAndSaveOnlineInvallidDocument()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", "Document");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitAndSaveOnlineInvallidFormat()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", "Format");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitAndSaveOnlineInvallidDestFolder()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", "DestFolder");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitAndSaveOnlineInvallidWidth()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", "Width");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitAndSaveOnlineInvallidHeight()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", "Height");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitAndSaveOnlineInvallidFrom()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", "From");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitAndSaveOnlineInvallidTo()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", "To");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitAndSaveOnlineInvallidPassword()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", "Password");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitAndSaveOnlineInvallidStorage()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", "Storage");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SplitAndSaveOnlineInvallidFontsFolder()
        {
            TestExecutor<SplitDocumentResult> testExecutor = new TestExecutor<SplitDocumentResult>("PutPresentationSplit", "FontsFolder");
            SplitDocumentResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SplitAndSaveOnline(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("DestFolder"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<int?>("From"), testExecutor.GetTestValue<int?>("To"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSection
        /// </summary>
        [Test]
        public void UpdateSection()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSection", null);
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSectionInvallidName()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSection", "Name");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSectionInvallidSectionIndex()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSection", "SectionIndex");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSectionInvallidSectionName()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSection", "SectionName");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSectionInvallidPassword()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSection", "Password");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSectionInvallidFolder()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSection", "Folder");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSectionInvallidStorage()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSection", "Storage");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSection(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SectionIndex"), testExecutor.GetTestValue<string>("SectionName"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSections
        /// </summary>
        [Test]
        public void SetSections()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSections", null);
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<Sections>("Sections"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSectionsInvallidName()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSections", "Name");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<Sections>("Sections"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSectionsInvallidSections()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSections", "Sections");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<Sections>("Sections"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSectionsInvallidPassword()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSections", "Password");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<Sections>("Sections"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSectionsInvallidFolder()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSections", "Folder");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<Sections>("Sections"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSectionsInvallidStorage()
        {
            TestExecutor<Sections> testExecutor = new TestExecutor<Sections>("PutSections", "Storage");
            Sections response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSections(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<Sections>("Sections"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSetParagraphPortionProperties
        /// </summary>
        [Test]
        public void UpdatePortion()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetParagraphPortionProperties", null);
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdatePortionInvallidName()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetParagraphPortionProperties", "Name");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdatePortionInvallidSlideIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetParagraphPortionProperties", "SlideIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdatePortionInvallidShapeIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetParagraphPortionProperties", "ShapeIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdatePortionInvallidParagraphIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetParagraphPortionProperties", "ParagraphIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdatePortionInvallidPortionIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetParagraphPortionProperties", "PortionIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdatePortionInvallidDto()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetParagraphPortionProperties", "Dto");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdatePortionInvallidPassword()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetParagraphPortionProperties", "Password");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdatePortionInvallidFolder()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetParagraphPortionProperties", "Folder");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdatePortionInvallidStorage()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetParagraphPortionProperties", "Storage");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdatePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSetParagraphProperties
        /// </summary>
        [Test]
        public void UpdateParagraph()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetParagraphProperties", null);
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateParagraphInvallidName()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetParagraphProperties", "Name");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetParagraphProperties", "SlideIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetParagraphProperties", "ShapeIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateParagraphInvallidParagraphIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetParagraphProperties", "ParagraphIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateParagraphInvallidDto()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetParagraphProperties", "Dto");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateParagraphInvallidPassword()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetParagraphProperties", "Password");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateParagraphInvallidFolder()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetParagraphProperties", "Folder");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateParagraphInvallidStorage()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetParagraphProperties", "Storage");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSetSubshapeParagraphPortionProperties
        /// </summary>
        [Test]
        public void UpdateSubshapePortion()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", null);
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapePortionInvallidName()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", "Name");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapePortionInvallidSlideIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", "SlideIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapePortionInvallidShapeIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", "ShapeIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapePortionInvallidParagraphIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", "ParagraphIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapePortionInvallidPortionIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", "PortionIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapePortionInvallidDto()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", "Dto");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapePortionInvallidPath()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", "Path");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapePortionInvallidPassword()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", "Password");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapePortionInvallidFolder()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", "Folder");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapePortionInvallidStorage()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutSetSubshapeParagraphPortionProperties", "Storage");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSetSubshapeParagraphProperties
        /// </summary>
        [Test]
        public void UpdateSubshapeParagraph()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetSubshapeParagraphProperties", null);
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeParagraphInvallidName()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetSubshapeParagraphProperties", "Name");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetSubshapeParagraphProperties", "SlideIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetSubshapeParagraphProperties", "ShapeIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeParagraphInvallidParagraphIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetSubshapeParagraphProperties", "ParagraphIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeParagraphInvallidDto()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetSubshapeParagraphProperties", "Dto");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeParagraphInvallidPath()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetSubshapeParagraphProperties", "Path");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeParagraphInvallidPassword()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetSubshapeParagraphProperties", "Password");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeParagraphInvallidFolder()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetSubshapeParagraphProperties", "Folder");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeParagraphInvallidStorage()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutSetSubshapeParagraphProperties", "Storage");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshapeParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutShapeSaveAs
        /// </summary>
        [Test]
        public void SaveShape()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "Name");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidSlideIndex()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "SlideIndex");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidShapeIndex()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "ShapeIndex");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidFormat()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "Format");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidOutPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "OutPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidOptions()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "Options");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidScaleX()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "ScaleX");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidScaleY()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "ScaleY");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidBounds()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "Bounds");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidPassword()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "Password");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "Folder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidStorage()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "Storage");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveShapeInvallidFontsFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutShapeSaveAs", "FontsFolder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test PutSlideAnimation
        /// </summary>
        [Test]
        public void SetAnimation()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimation", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideAnimation>("Animation"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetAnimationInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimation", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideAnimation>("Animation"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetAnimationInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimation", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideAnimation>("Animation"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetAnimationInvallidAnimation()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimation", "Animation");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideAnimation>("Animation"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetAnimationInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimation", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideAnimation>("Animation"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetAnimationInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimation", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideAnimation>("Animation"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetAnimationInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimation", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetAnimation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideAnimation>("Animation"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlideAnimationEffect
        /// </summary>
        [Test]
        public void UpdateAnimationEffect()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationEffect", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationEffectInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationEffect", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationEffectInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationEffect", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationEffectInvallidEffectIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationEffect", "EffectIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationEffectInvallidEffect()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationEffect", "Effect");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationEffectInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationEffect", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationEffectInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationEffect", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationEffectInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationEffect", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlideAnimationInteractiveSequenceEffect
        /// </summary>
        [Test]
        public void UpdateAnimationInteractiveSequenceEffect()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationInteractiveSequenceEffect", null);
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationInteractiveSequenceEffectInvallidName()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationInteractiveSequenceEffect", "Name");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationInteractiveSequenceEffectInvallidSlideIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationInteractiveSequenceEffect", "SlideIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationInteractiveSequenceEffectInvallidSequenceIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationInteractiveSequenceEffect", "SequenceIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationInteractiveSequenceEffectInvallidEffectIndex()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationInteractiveSequenceEffect", "EffectIndex");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationInteractiveSequenceEffectInvallidEffect()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationInteractiveSequenceEffect", "Effect");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationInteractiveSequenceEffectInvallidPassword()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationInteractiveSequenceEffect", "Password");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationInteractiveSequenceEffectInvallidFolder()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationInteractiveSequenceEffect", "Folder");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateAnimationInteractiveSequenceEffectInvallidStorage()
        {
            TestExecutor<SlideAnimation> testExecutor = new TestExecutor<SlideAnimation>("PutSlideAnimationInteractiveSequenceEffect", "Storage");
            SlideAnimation response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateAnimationInteractiveSequenceEffect(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("SequenceIndex"), testExecutor.GetTestValue<int>("EffectIndex"), testExecutor.GetTestValue<Effect>("Effect"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlideHeaderFooter
        /// </summary>
        [Test]
        public void SetSlideHeaderFooter()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("PutSlideHeaderFooter", null);
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlideHeaderFooterInvallidName()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("PutSlideHeaderFooter", "Name");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlideHeaderFooterInvallidSlideIndex()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("PutSlideHeaderFooter", "SlideIndex");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlideHeaderFooterInvallidDto()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("PutSlideHeaderFooter", "Dto");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlideHeaderFooterInvallidPassword()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("PutSlideHeaderFooter", "Password");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlideHeaderFooterInvallidFolder()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("PutSlideHeaderFooter", "Folder");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlideHeaderFooterInvallidStorage()
        {
            TestExecutor<HeaderFooter> testExecutor = new TestExecutor<HeaderFooter>("PutSlideHeaderFooter", "Storage");
            HeaderFooter response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlideSaveAs
        /// </summary>
        [Test]
        public void SaveSlide()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "Name");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidSlideIndex()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "SlideIndex");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidFormat()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "Format");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidOutPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "OutPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidOptions()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "Options");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidWidth()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "Width");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidHeight()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "Height");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidPassword()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "Password");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "Folder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidStorage()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "Storage");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSlideInvallidFontsFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlideSaveAs", "FontsFolder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test PutSlideShapeInfo
        /// </summary>
        [Test]
        public void UpdateShape()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideShapeInfo", null);
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateShapeInvallidName()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideShapeInfo", "Name");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateShapeInvallidSlideIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideShapeInfo", "SlideIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateShapeInvallidShapeIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideShapeInfo", "ShapeIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateShapeInvallidDto()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideShapeInfo", "Dto");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateShapeInvallidPassword()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideShapeInfo", "Password");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateShapeInvallidFolder()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideShapeInfo", "Folder");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateShapeInvallidStorage()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideShapeInfo", "Storage");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlideSubshapeInfo
        /// </summary>
        [Test]
        public void UpdateSubshape()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideSubshapeInfo", null);
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeInvallidName()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideSubshapeInfo", "Name");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeInvallidSlideIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideSubshapeInfo", "SlideIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeInvallidShapeIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideSubshapeInfo", "ShapeIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeInvallidDto()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideSubshapeInfo", "Dto");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeInvallidPath()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideSubshapeInfo", "Path");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeInvallidPassword()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideSubshapeInfo", "Password");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeInvallidFolder()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideSubshapeInfo", "Folder");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSubshapeInvallidStorage()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutSlideSubshapeInfo", "Storage");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesConvert
        /// </summary>
        [Test]
        public void ConvertAndSave()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesConvert", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.ConvertAndSave(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void ConvertAndSaveInvallidDocument()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesConvert", "Document");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.ConvertAndSave(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void ConvertAndSaveInvallidFormat()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesConvert", "Format");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.ConvertAndSave(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void ConvertAndSaveInvallidOutPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesConvert", "OutPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.ConvertAndSave(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void ConvertAndSaveInvallidPassword()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesConvert", "Password");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.ConvertAndSave(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void ConvertAndSaveInvallidStorage()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesConvert", "Storage");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.ConvertAndSave(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void ConvertAndSaveInvallidFontsFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesConvert", "FontsFolder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.ConvertAndSave(testExecutor.GetTestValue<System.IO.Stream>("Document"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test PutSlidesDocumentFromHtml
        /// </summary>
        [Test]
        public void PutSlidesDocumentFromHtml()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesDocumentFromHtml", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesDocumentFromHtmlInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesDocumentFromHtml", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesDocumentFromHtmlInvallidHtml()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesDocumentFromHtml", "Html");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesDocumentFromHtmlInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesDocumentFromHtml", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesDocumentFromHtmlInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesDocumentFromHtml", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesDocumentFromHtmlInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesDocumentFromHtml", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("Html"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesHeaderFooter
        /// </summary>
        [Test]
        public void SetPresentationHeaderFooter()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesHeaderFooter", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetPresentationHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetPresentationHeaderFooterInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesHeaderFooter", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetPresentationHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetPresentationHeaderFooterInvallidDto()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesHeaderFooter", "Dto");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetPresentationHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetPresentationHeaderFooterInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesHeaderFooter", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetPresentationHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetPresentationHeaderFooterInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesHeaderFooter", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetPresentationHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetPresentationHeaderFooterInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesHeaderFooter", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetPresentationHeaderFooter(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<HeaderFooter>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesMerge
        /// </summary>
        [Test]
        public void MergeAndSaveOnline()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesMerge", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MergeAndSaveOnline(testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<List<FileInfo>>("Files"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MergeAndSaveOnlineInvallidOutPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesMerge", "OutPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MergeAndSaveOnline(testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<List<FileInfo>>("Files"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MergeAndSaveOnlineInvallidFiles()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesMerge", "Files");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MergeAndSaveOnline(testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<List<FileInfo>>("Files"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MergeAndSaveOnlineInvallidRequest()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesMerge", "Request");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MergeAndSaveOnline(testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<List<FileInfo>>("Files"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MergeAndSaveOnlineInvallidPassword()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesMerge", "Password");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MergeAndSaveOnline(testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<List<FileInfo>>("Files"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void MergeAndSaveOnlineInvallidStorage()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesMerge", "Storage");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.MergeAndSaveOnline(testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<List<FileInfo>>("Files"), testExecutor.GetTestValue<OrderedMergeRequest>("Request"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test PutSlidesProtectionProperties
        /// </summary>
        [Test]
        public void SetProtectionProperties()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("PutSlidesProtectionProperties", null);
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ProtectionProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetProtectionPropertiesInvallidName()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("PutSlidesProtectionProperties", "Name");
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ProtectionProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetProtectionPropertiesInvallidDto()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("PutSlidesProtectionProperties", "Dto");
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ProtectionProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetProtectionPropertiesInvallidPassword()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("PutSlidesProtectionProperties", "Password");
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ProtectionProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetProtectionPropertiesInvallidFolder()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("PutSlidesProtectionProperties", "Folder");
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ProtectionProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetProtectionPropertiesInvallidStorage()
        {
            TestExecutor<ProtectionProperties> testExecutor = new TestExecutor<ProtectionProperties>("PutSlidesProtectionProperties", "Storage");
            ProtectionProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetProtectionProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ProtectionProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesSaveAs
        /// </summary>
        [Test]
        public void SavePresentation()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesSaveAs", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SavePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SavePresentationInvallidName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesSaveAs", "Name");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SavePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SavePresentationInvallidFormat()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesSaveAs", "Format");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SavePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SavePresentationInvallidOutPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesSaveAs", "OutPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SavePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SavePresentationInvallidOptions()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesSaveAs", "Options");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SavePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SavePresentationInvallidPassword()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesSaveAs", "Password");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SavePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SavePresentationInvallidFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesSaveAs", "Folder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SavePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SavePresentationInvallidStorage()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesSaveAs", "Storage");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SavePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SavePresentationInvallidFontsFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSlidesSaveAs", "FontsFolder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SavePresentation(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<ExportOptions>("Options"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test PutSlidesSetDocumentProperty
        /// </summary>
        [Test]
        public void SetDocumentProperty()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("PutSlidesSetDocumentProperty", null);
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<DocumentProperty>("Property"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertyInvallidName()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("PutSlidesSetDocumentProperty", "Name");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<DocumentProperty>("Property"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertyInvallidPropertyName()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("PutSlidesSetDocumentProperty", "PropertyName");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<DocumentProperty>("Property"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertyInvallidProperty()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("PutSlidesSetDocumentProperty", "Property");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<DocumentProperty>("Property"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertyInvallidPassword()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("PutSlidesSetDocumentProperty", "Password");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<DocumentProperty>("Property"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertyInvallidFolder()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("PutSlidesSetDocumentProperty", "Folder");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<DocumentProperty>("Property"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetDocumentPropertyInvallidStorage()
        {
            TestExecutor<DocumentProperty> testExecutor = new TestExecutor<DocumentProperty>("PutSlidesSetDocumentProperty", "Storage");
            DocumentProperty response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetDocumentProperty(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<string>("PropertyName"), testExecutor.GetTestValue<DocumentProperty>("Property"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesSlide
        /// </summary>
        [Test]
        public void UpdateSlide()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("PutSlidesSlide", null);
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Slide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSlideInvallidName()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("PutSlidesSlide", "Name");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Slide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSlideInvallidSlideIndex()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("PutSlidesSlide", "SlideIndex");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Slide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSlideInvallidSlideDto()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("PutSlidesSlide", "SlideDto");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Slide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSlideInvallidPassword()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("PutSlidesSlide", "Password");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Slide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSlideInvallidFolder()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("PutSlidesSlide", "Folder");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Slide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateSlideInvallidStorage()
        {
            TestExecutor<Slide> testExecutor = new TestExecutor<Slide>("PutSlidesSlide", "Storage");
            Slide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<Slide>("SlideDto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesSlideBackground
        /// </summary>
        [Test]
        public void SetBackground()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackground", null);
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideBackground>("Background"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundInvallidName()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackground", "Name");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideBackground>("Background"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundInvallidSlideIndex()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackground", "SlideIndex");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideBackground>("Background"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundInvallidBackground()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackground", "Background");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideBackground>("Background"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundInvallidPassword()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackground", "Password");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideBackground>("Background"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundInvallidFolder()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackground", "Folder");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideBackground>("Background"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundInvallidStorage()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackground", "Storage");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackground(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<SlideBackground>("Background"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesSlideBackgroundColor
        /// </summary>
        [Test]
        public void SetBackgroundColor()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackgroundColor", null);
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackgroundColor(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Color"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundColorInvallidName()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackgroundColor", "Name");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackgroundColor(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Color"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundColorInvallidSlideIndex()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackgroundColor", "SlideIndex");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackgroundColor(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Color"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundColorInvallidColor()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackgroundColor", "Color");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackgroundColor(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Color"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundColorInvallidPassword()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackgroundColor", "Password");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackgroundColor(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Color"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundColorInvallidFolder()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackgroundColor", "Folder");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackgroundColor(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Color"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetBackgroundColorInvallidStorage()
        {
            TestExecutor<SlideBackground> testExecutor = new TestExecutor<SlideBackground>("PutSlidesSlideBackgroundColor", "Storage");
            SlideBackground response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetBackgroundColor(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<string>("Color"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesSlideProperties
        /// </summary>
        [Test]
        public void SetSlideProperties()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("PutSlidesSlideProperties", null);
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<SlideProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlidePropertiesInvallidName()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("PutSlidesSlideProperties", "Name");
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<SlideProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlidePropertiesInvallidDto()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("PutSlidesSlideProperties", "Dto");
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<SlideProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlidePropertiesInvallidPassword()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("PutSlidesSlideProperties", "Password");
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<SlideProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlidePropertiesInvallidFolder()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("PutSlidesSlideProperties", "Folder");
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<SlideProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetSlidePropertiesInvallidStorage()
        {
            TestExecutor<SlideProperties> testExecutor = new TestExecutor<SlideProperties>("PutSlidesSlideProperties", "Storage");
            SlideProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetSlideProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<SlideProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesSlideSize
        /// </summary>
        [Test]
        public void PutSlidesSlideSize()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesSlideSize", null);
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<SizeType?>("SizeType"), testExecutor.GetTestValue<ScaleType?>("ScaleType"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvallidName()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesSlideSize", "Name");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<SizeType?>("SizeType"), testExecutor.GetTestValue<ScaleType?>("ScaleType"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvallidWidth()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesSlideSize", "Width");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<SizeType?>("SizeType"), testExecutor.GetTestValue<ScaleType?>("ScaleType"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvallidHeight()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesSlideSize", "Height");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<SizeType?>("SizeType"), testExecutor.GetTestValue<ScaleType?>("ScaleType"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvallidSizeType()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesSlideSize", "SizeType");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<SizeType?>("SizeType"), testExecutor.GetTestValue<ScaleType?>("ScaleType"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvallidScaleType()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesSlideSize", "ScaleType");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<SizeType?>("SizeType"), testExecutor.GetTestValue<ScaleType?>("ScaleType"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvallidPassword()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesSlideSize", "Password");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<SizeType?>("SizeType"), testExecutor.GetTestValue<ScaleType?>("ScaleType"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvallidFolder()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesSlideSize", "Folder");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<SizeType?>("SizeType"), testExecutor.GetTestValue<ScaleType?>("ScaleType"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvallidStorage()
        {
            TestExecutor<Document> testExecutor = new TestExecutor<Document>("PutSlidesSlideSize", "Storage");
            Document response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int?>("Width"), testExecutor.GetTestValue<int?>("Height"), testExecutor.GetTestValue<SizeType?>("SizeType"), testExecutor.GetTestValue<ScaleType?>("ScaleType"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesViewProperties
        /// </summary>
        [Test]
        public void SetViewProperties()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("PutSlidesViewProperties", null);
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ViewProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetViewPropertiesInvallidName()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("PutSlidesViewProperties", "Name");
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ViewProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetViewPropertiesInvallidDto()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("PutSlidesViewProperties", "Dto");
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ViewProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetViewPropertiesInvallidPassword()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("PutSlidesViewProperties", "Password");
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ViewProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetViewPropertiesInvallidFolder()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("PutSlidesViewProperties", "Folder");
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ViewProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void SetViewPropertiesInvallidStorage()
        {
            TestExecutor<ViewProperties> testExecutor = new TestExecutor<ViewProperties>("PutSlidesViewProperties", "Storage");
            ViewProperties response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.SetViewProperties(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<ViewProperties>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSubshapeSaveAs
        /// </summary>
        [Test]
        public void SaveSubshape()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", null);
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidName()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "Name");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidSlideIndex()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "SlideIndex");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidShapeIndex()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "ShapeIndex");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidFormat()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "Format");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidOutPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "OutPath");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidPath()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "Path");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidOptions()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "Options");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidScaleX()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "ScaleX");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidScaleY()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "ScaleY");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidBounds()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "Bounds");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidPassword()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "Password");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "Folder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidStorage()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "Storage");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        [Test]
        public void SaveSubshapeInvallidFontsFolder()
        {
            VoidTestExecutor testExecutor = new VoidTestExecutor("PutSubshapeSaveAs", "FontsFolder");
            
            bool needAssertResponse = false;
            try
            {
                m_instance.SaveSubshape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeExportFormat>("Format"), testExecutor.GetTestValue<string>("OutPath"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<IShapeExportOptions>("Options"), testExecutor.GetTestValue<double?>("ScaleX"), testExecutor.GetTestValue<double?>("ScaleY"), testExecutor.GetTestValue<ShapeThumbnailBounds?>("Bounds"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"), testExecutor.GetTestValue<string>("FontsFolder"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult();
            }
        }

        
        /// <summary>
        /// Test PutUpdateNotesSlide
        /// </summary>
        [Test]
        public void UpdateNotesSlide()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PutUpdateNotesSlide", null);
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideInvallidName()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PutUpdateNotesSlide", "Name");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideInvallidSlideIndex()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PutUpdateNotesSlide", "SlideIndex");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideInvallidDto()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PutUpdateNotesSlide", "Dto");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideInvallidPassword()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PutUpdateNotesSlide", "Password");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideInvallidFolder()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PutUpdateNotesSlide", "Folder");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideInvallidStorage()
        {
            TestExecutor<NotesSlide> testExecutor = new TestExecutor<NotesSlide>("PutUpdateNotesSlide", "Storage");
            NotesSlide response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlide(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<NotesSlide>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutUpdateNotesSlideShape
        /// </summary>
        [Test]
        public void UpdateNotesSlideShape()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutUpdateNotesSlideShape", null);
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideShapeInvallidName()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutUpdateNotesSlideShape", "Name");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideShapeInvallidSlideIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutUpdateNotesSlideShape", "SlideIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideShapeInvallidShapeIndex()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutUpdateNotesSlideShape", "ShapeIndex");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideShapeInvallidDto()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutUpdateNotesSlideShape", "Dto");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideShapeInvallidPassword()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutUpdateNotesSlideShape", "Password");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideShapeInvallidFolder()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutUpdateNotesSlideShape", "Folder");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideShapeInvallidStorage()
        {
            TestExecutor<ShapeBase> testExecutor = new TestExecutor<ShapeBase>("PutUpdateNotesSlideShape", "Storage");
            ShapeBase response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideShape(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<ShapeBase>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutUpdateNotesSlideShapeParagraph
        /// </summary>
        [Test]
        public void UpdateNotesSlideParagraph()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutUpdateNotesSlideShapeParagraph", null);
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideParagraphInvallidName()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutUpdateNotesSlideShapeParagraph", "Name");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideParagraphInvallidSlideIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutUpdateNotesSlideShapeParagraph", "SlideIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideParagraphInvallidShapeIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutUpdateNotesSlideShapeParagraph", "ShapeIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideParagraphInvallidParagraphIndex()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutUpdateNotesSlideShapeParagraph", "ParagraphIndex");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideParagraphInvallidDto()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutUpdateNotesSlideShapeParagraph", "Dto");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideParagraphInvallidPassword()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutUpdateNotesSlideShapeParagraph", "Password");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideParagraphInvallidFolder()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutUpdateNotesSlideShapeParagraph", "Folder");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlideParagraphInvallidStorage()
        {
            TestExecutor<Paragraph> testExecutor = new TestExecutor<Paragraph>("PutUpdateNotesSlideShapeParagraph", "Storage");
            Paragraph response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlideParagraph(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<Paragraph>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutUpdateNotesSlideShapePortion
        /// </summary>
        [Test]
        public void UpdateNotesSlidePortion()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutUpdateNotesSlideShapePortion", null);
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlidePortionInvallidName()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutUpdateNotesSlideShapePortion", "Name");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlidePortionInvallidSlideIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutUpdateNotesSlideShapePortion", "SlideIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlidePortionInvallidShapeIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutUpdateNotesSlideShapePortion", "ShapeIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlidePortionInvallidParagraphIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutUpdateNotesSlideShapePortion", "ParagraphIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlidePortionInvallidPortionIndex()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutUpdateNotesSlideShapePortion", "PortionIndex");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlidePortionInvallidDto()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutUpdateNotesSlideShapePortion", "Dto");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlidePortionInvallidPassword()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutUpdateNotesSlideShapePortion", "Password");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlidePortionInvallidFolder()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutUpdateNotesSlideShapePortion", "Folder");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UpdateNotesSlidePortionInvallidStorage()
        {
            TestExecutor<Portion> testExecutor = new TestExecutor<Portion>("PutUpdateNotesSlideShapePortion", "Storage");
            Portion response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UpdateNotesSlidePortion(testExecutor.GetTestValue<string>("Name"), testExecutor.GetTestValue<int>("SlideIndex"), testExecutor.GetTestValue<int>("ShapeIndex"), testExecutor.GetTestValue<int>("ParagraphIndex"), testExecutor.GetTestValue<int>("PortionIndex"), testExecutor.GetTestValue<Portion>("Dto"), testExecutor.GetTestValue<string>("Password"), testExecutor.GetTestValue<string>("Folder"), testExecutor.GetTestValue<string>("Storage"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test StorageExists
        /// </summary>
        [Test]
        public void StorageExists()
        {
            TestExecutor<StorageExist> testExecutor = new TestExecutor<StorageExist>("StorageExists", null);
            StorageExist response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.StorageExists(testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void StorageExistsInvallidStorageName()
        {
            TestExecutor<StorageExist> testExecutor = new TestExecutor<StorageExist>("StorageExists", "StorageName");
            StorageExist response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.StorageExists(testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test UploadFile
        /// </summary>
        [Test]
        public void UploadFile()
        {
            TestExecutor<FilesUploadResult> testExecutor = new TestExecutor<FilesUploadResult>("UploadFile", null);
            FilesUploadResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UploadFile(testExecutor.GetTestValue<System.IO.Stream>("File"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UploadFileInvallidFile()
        {
            TestExecutor<FilesUploadResult> testExecutor = new TestExecutor<FilesUploadResult>("UploadFile", "File");
            FilesUploadResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UploadFile(testExecutor.GetTestValue<System.IO.Stream>("File"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UploadFileInvallidPath()
        {
            TestExecutor<FilesUploadResult> testExecutor = new TestExecutor<FilesUploadResult>("UploadFile", "Path");
            FilesUploadResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UploadFile(testExecutor.GetTestValue<System.IO.Stream>("File"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void UploadFileInvallidStorageName()
        {
            TestExecutor<FilesUploadResult> testExecutor = new TestExecutor<FilesUploadResult>("UploadFile", "StorageName");
            FilesUploadResult response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.UploadFile(testExecutor.GetTestValue<System.IO.Stream>("File"), testExecutor.GetTestValue<string>("Path"), testExecutor.GetTestValue<string>("StorageName"));
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
